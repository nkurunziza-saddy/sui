{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "editor",
  "type": "registry:component",
  "title": "Editor",
  "description": "A rich text editor based on Lexical.",
  "dependencies": [
    "lexical",
    "@lexical/react",
    "@lexical/list",
    "@lexical/code",
    "@lexical/link",
    "@lexical/table",
    "@lexical/markdown",
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "dropdown-menu",
    "input",
    "label",
    "dialog"
  ],
  "files": [
    {
      "path": "src/registry/new-york/blocks/editor/index.tsx",
      "content": "\"use client\";\nimport type React from \"react\";\nimport { useState, useCallback } from \"react\";\nimport { LexicalComposer } from \"@lexical/react/LexicalComposer\";\nimport { RichTextPlugin } from \"@lexical/react/LexicalRichTextPlugin\";\nimport { ContentEditable } from \"@lexical/react/LexicalContentEditable\";\nimport { HistoryPlugin } from \"@lexical/react/LexicalHistoryPlugin\";\nimport { AutoFocusPlugin } from \"@lexical/react/LexicalAutoFocusPlugin\";\nimport { LinkPlugin } from \"@lexical/react/LexicalLinkPlugin\";\nimport { ListPlugin } from \"@lexical/react/LexicalListPlugin\";\nimport { CheckListPlugin } from \"@lexical/react/LexicalCheckListPlugin\";\nimport { TablePlugin } from \"@lexical/react/LexicalTablePlugin\";\nimport TableHoverActionsPlugin from \"./plugins/table-hover-actions\";\nimport { HorizontalRulePlugin } from \"@lexical/react/LexicalHorizontalRulePlugin\";\nimport { MarkdownShortcutPlugin } from \"@lexical/react/LexicalMarkdownShortcutPlugin\";\nimport { LexicalErrorBoundary } from \"@lexical/react/LexicalErrorBoundary\";\nimport { OnChangePlugin } from \"@lexical/react/LexicalOnChangePlugin\";\nimport SlashCommandPlugin from \"./plugins/slash-command\";\nimport { TRANSFORMERS } from \"@lexical/markdown\";\nimport { EDITOR_CONFIG } from \"./lib/configs\";\nimport { Toolbar } from \"./plugins/toolbar\";\nimport { FloatingToolbar } from \"./plugins/floating-toolbar\";\nimport type { EditorProps } from \"./lib/types/editor\";\nimport { type EditorState, type LexicalEditor } from \"lexical\";\n\nfunction EditorContent({\n  placeholder = \"Start writing ...\",\n  className = \"\",\n  minHeight = \"400px\",\n  maxHeight,\n  readOnly = false,\n}: Pick<\n  EditorProps,\n  \"placeholder\" | \"className\" | \"minHeight\" | \"maxHeight\" | \"readOnly\"\n>) {\n  const editorStyle = {\n    minHeight,\n    maxHeight,\n    caretColor: \"hsl(var(--editor-primary))\",\n    lineHeight: \"1.7\",\n  };\n\n  return (\n    <div className=\"relative\">\n      <RichTextPlugin\n        contentEditable={\n          <ContentEditable\n            className={`\n              p-6 md:p-8 \n              outline-none \n              max-w-none \n              transition-all duration-300\n              ${className}\n            `}\n            style={editorStyle}\n            readOnly={readOnly}\n          />\n        }\n        placeholder={\n          <div className=\"absolute top-6 md:top-8 left-6 md:left-8 text-muted-foreground/60 pointer-events-none select-none text-base md:text-lg\">\n            {placeholder}\n          </div>\n        }\n        ErrorBoundary={LexicalErrorBoundary}\n      />\n    </div>\n  );\n}\n\nfunction EditorPlugins({\n  showFloatingToolbar = true,\n  customPlugins = [],\n  onChange = () => {},\n}: {\n  showFloatingToolbar?: boolean;\n  customPlugins?: React.ComponentType[];\n  onChange: (\n    editorState: EditorState,\n    editor: LexicalEditor,\n    tags: Set<string>\n  ) => void;\n}) {\n  return (\n    <>\n      <HistoryPlugin />\n      <AutoFocusPlugin />\n      <ListPlugin />\n      <CheckListPlugin />\n      <LinkPlugin />\n\n      <HorizontalRulePlugin />\n      {/* Table plugins - order matters! */}\n      <TablePlugin\n        hasCellMerge={true}\n        hasCellBackgroundColor={true}\n        hasTabHandler={true}\n      />\n      <TableHoverActionsPlugin />\n      <SlashCommandPlugin />\n      <MarkdownShortcutPlugin transformers={TRANSFORMERS} />\n      <OnChangePlugin onChange={onChange} />\n      {showFloatingToolbar && <FloatingToolbar />}\n      {customPlugins.map((Plugin, index) => (\n        <Plugin key={index} />\n      ))}\n    </>\n  );\n}\n\nexport function Editor({\n  initialValue = \"\",\n  placeholder = 'Start writing or use \"/\" for quick commands',\n  className = \"\",\n  minHeight = \"400px\",\n  maxHeight,\n  showToolbar = false,\n  showFloatingToolbar = true,\n  readOnly = false,\n  onChange,\n  plugins = [],\n}: EditorProps) {\n  const [, setEditorState] = useState<string>(initialValue);\n\n  const initialConfig = {\n    ...EDITOR_CONFIG,\n    editorState: initialValue ? initialValue : null,\n    editable: !readOnly,\n  };\n\n  const handleEditorChange = useCallback(\n    (editorState: EditorState) => {\n      const jsonState = editorState.toJSON();\n      const jsonString = JSON.stringify(jsonState);\n\n      setEditorState(jsonString);\n      onChange?.(jsonString);\n    },\n    [onChange]\n  );\n\n  return (\n    <div className={`w-full ${className}`}>\n      <LexicalComposer initialConfig={initialConfig}>\n        <div className=\" relative overflow-hidden\">\n          {showToolbar && <Toolbar />}\n\n          <EditorContent\n            placeholder={placeholder}\n            minHeight={minHeight}\n            maxHeight={maxHeight}\n            readOnly={readOnly}\n          />\n\n          <EditorPlugins\n            showFloatingToolbar={showFloatingToolbar}\n            customPlugins={plugins}\n            onChange={handleEditorChange}\n          />\n        </div>\n      </LexicalComposer>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/new-york/blocks/editor/components/index.ts",
      "content": "export * from \"./link-dialog\";\nexport * from \"./table-dialog\";\nexport * from \"./image-dialog\";\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/new-york/blocks/editor/components/image-dialog.tsx",
      "content": "import type React from \"react\";\nimport { useState, useRef } from \"react\";\nimport { Upload } from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\n\nexport function ImageDialog({\n  isOpen,\n  onClose,\n  onSubmit,\n}: {\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit: (src: string, alt: string) => void;\n}) {\n  const [url, setUrl] = useState(\"\");\n  const [alt, setAlt] = useState(\"\");\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (url.trim()) {\n      onSubmit(url.trim(), alt.trim() || \"Image\");\n    }\n    onClose();\n    setUrl(\"\");\n    setAlt(\"\");\n  };\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        const result = e.target?.result as string;\n        if (result) {\n          onSubmit(result, file.name);\n          onClose();\n          setUrl(\"\");\n          setAlt(\"\");\n        }\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  return (\n    <>\n      {isOpen && (\n        <Dialog open={isOpen} onOpenChange={onClose}>\n          <DialogContent\n            aria-describedby=\"image-dialog\"\n            className=\"sm:max-w-md backdrop-blur-md bg-background/95\"\n          >\n            <div>\n              <DialogHeader>\n                <DialogTitle className=\"text-xl font-semibold\">\n                  Insert Image\n                </DialogTitle>\n              </DialogHeader>\n              <div className=\"space-y-4 mt-4\">\n                <form onSubmit={handleSubmit} className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"image-url\" className=\"text-sm font-medium\">\n                      Image URL\n                    </Label>\n                    <Input\n                      id=\"image-url\"\n                      value={url}\n                      onChange={(e) => setUrl(e.target.value)}\n                      placeholder=\"https://example.com/image.jpg\"\n                      className=\"mt-1.5\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"image-alt\" className=\"text-sm font-medium\">\n                      Alt Text (optional)\n                    </Label>\n                    <Input\n                      id=\"image-alt\"\n                      value={alt}\n                      onChange={(e) => setAlt(e.target.value)}\n                      placeholder=\"Describe the image\"\n                      className=\"mt-1.5\"\n                    />\n                  </div>\n                  <div className=\"flex gap-2 justify-end\">\n                    <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n                      Cancel\n                    </Button>\n                    <Button\n                      type=\"submit\"\n                      disabled={!url.trim()}\n                      className=\"bg-primary hover:bg-primary/90\"\n                    >\n                      Insert Image\n                    </Button>\n                  </div>\n                </form>\n\n                <div className=\"relative\">\n                  <div className=\"absolute inset-0 flex items-center\">\n                    <span className=\"w-full border-t border-border/60\" />\n                  </div>\n                  <div className=\"relative flex justify-center text-xs uppercase\">\n                    <span className=\"bg-background px-2 text-muted-foreground font-medium\">\n                      Or\n                    </span>\n                  </div>\n                </div>\n\n                <div>\n                  <input\n                    type=\"file\"\n                    ref={fileInputRef}\n                    onChange={handleFileChange}\n                    accept=\"image/*\"\n                    className=\"hidden\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    className=\"w-full hover:bg-accent/80 transition-colors bg-transparent\"\n                    onClick={() => fileInputRef.current?.click()}\n                  >\n                    <Upload className=\"size-4 mr-2\" />\n                    Upload from Computer\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      )}\n    </>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/new-york/blocks/editor/components/link-dialog.tsx",
      "content": "import type React from \"react\";\nimport { useState, useEffect } from \"react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\n\nexport function LinkDialog({\n  isOpen,\n  onClose,\n  onSubmit,\n  initialUrl = \"\",\n}: {\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit: (url: string) => void;\n  initialUrl?: string;\n}) {\n  const [url, setUrl] = useState(initialUrl);\n\n  useEffect(() => {\n    if (isOpen) {\n      setUrl(initialUrl);\n    }\n  }, [isOpen, initialUrl]);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (url.trim()) {\n      onSubmit(url.trim());\n    }\n    onClose();\n  };\n\n  return (\n    <>\n      {isOpen && (\n        <Dialog open={isOpen} onOpenChange={onClose}>\n          <DialogContent\n            aria-describedby=\"link-dialog\"\n            className=\"sm:max-w-md backdrop-blur-md bg-background/95\"\n          >\n            <div>\n              <DialogHeader>\n                <DialogTitle className=\"text-xl font-semibold\">\n                  Insert Link\n                </DialogTitle>\n              </DialogHeader>\n              <form onSubmit={handleSubmit} className=\"space-y-4 mt-4\">\n                <div>\n                  <Label htmlFor=\"url\" className=\"text-sm font-medium\">\n                    URL\n                  </Label>\n                  <Input\n                    id=\"url\"\n                    value={url}\n                    onChange={(e) => setUrl(e.target.value)}\n                    placeholder=\"https://example.com\"\n                    autoFocus\n                    className=\"mt-1.5 focus:ring-2 focus:ring-primary/20 transition-all\"\n                  />\n                </div>\n                <div className=\"flex gap-2 justify-end\">\n                  <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n                    Cancel\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    className=\"bg-primary hover:bg-primary/90\"\n                  >\n                    Insert Link\n                  </Button>\n                </div>\n              </form>\n            </div>\n          </DialogContent>\n        </Dialog>\n      )}\n    </>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/new-york/blocks/editor/components/table-dialog.tsx",
      "content": "import type React from \"react\";\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\n\nexport function TableDialog({\n  isOpen,\n  onClose,\n  onSubmit,\n}: {\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit: (rows: number, columns: number) => void;\n}) {\n  const [rows, setRows] = useState(3);\n  const [columns, setColumns] = useState(3);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onSubmit(rows, columns);\n    onClose();\n  };\n\n  return (\n    <>\n      {isOpen && (\n        <Dialog open={isOpen} onOpenChange={onClose}>\n          <DialogContent\n            aria-describedby=\"table-dialog\"\n            className=\"sm:max-w-md backdrop-blur-md bg-background/95\"\n          >\n            <div>\n              <DialogHeader>\n                <DialogTitle className=\"text-xl font-semibold\">\n                  Insert Table\n                </DialogTitle>\n              </DialogHeader>\n              <form onSubmit={handleSubmit} className=\"space-y-4 mt-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"rows\" className=\"text-sm font-medium\">\n                      Rows\n                    </Label>\n                    <Input\n                      id=\"rows\"\n                      type=\"number\"\n                      min=\"1\"\n                      max=\"20\"\n                      value={rows}\n                      onChange={(e) =>\n                        setRows(\n                          Math.max(1, Number.parseInt(e.target.value) || 1)\n                        )\n                      }\n                      className=\"mt-1.5\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"columns\" className=\"text-sm font-medium\">\n                      Columns\n                    </Label>\n                    <Input\n                      id=\"columns\"\n                      type=\"number\"\n                      min=\"1\"\n                      max=\"20\"\n                      value={columns}\n                      onChange={(e) =>\n                        setColumns(\n                          Math.max(1, Number.parseInt(e.target.value) || 1)\n                        )\n                      }\n                      className=\"mt-1.5\"\n                    />\n                  </div>\n                </div>\n                <div className=\"flex gap-2 justify-end\">\n                  <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n                    Cancel\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    className=\"bg-primary hover:bg-primary/90\"\n                  >\n                    Insert Table\n                  </Button>\n                </div>\n              </form>\n            </div>\n          </DialogContent>\n        </Dialog>\n      )}\n    </>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/new-york/blocks/editor/components/theme-toggler.tsx",
      "content": "import { Moon, Sun } from \"lucide-react\";\nimport { useTheme } from \"next-themes\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\nexport function ModeToggle() {\n  const { setTheme } = useTheme();\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"ghost\" size=\"sm\">\n          <Sun className=\"h-[1.2rem] w-[1.2rem] scale-100 rotate-0 transition-all dark:scale-0 dark:-rotate-90\" />\n          <Moon className=\"absolute h-[1.2rem] w-[1.2rem] scale-0 rotate-90 transition-all dark:scale-100 dark:rotate-0\" />\n          <span className=\"sr-only\">Toggle theme</span>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\">\n        <DropdownMenuItem onClick={() => setTheme(\"light\")}>\n          Light\n        </DropdownMenuItem>\n        <DropdownMenuItem onClick={() => setTheme(\"dark\")}>\n          Dark\n        </DropdownMenuItem>\n        <DropdownMenuItem onClick={() => setTheme(\"system\")}>\n          System\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/new-york/blocks/editor/components/toolbar-separator.tsx",
      "content": "import { cn } from \"@/lib/utils\";\n\ninterface Props {\n  orientation?: \"vertical\" | \"horizontal\";\n}\nconst Separator = ({ orientation = \"vertical\" }: Props) => {\n  return (\n    <div\n      className={cn(\n        \"bg-gradient-to-b from-transparent via-border to-transparent mx-2\",\n        orientation === \"horizontal\" ? \"h-px w-6 my-2\" : \"w-px h-6 mx-2\"\n      )}\n    />\n  );\n};\n\nexport default Separator;\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/new-york/blocks/editor/lib/colors.ts",
      "content": "export const HIGHLIGHT_COLORS = [\n  { name: \"Golden\", value: \"rgba(255, 235, 59, 0.3)\" },\n  { name: \"Emerald\", value: \"rgba(16, 185, 129, 0.3)\" },\n  { name: \"Sky\", value: \"rgba(14, 165, 233, 0.3)\" },\n  { name: \"Rose\", value: \"rgba(244, 63, 94, 0.3)\" },\n  { name: \"Violet\", value: \"rgba(139, 92, 246, 0.3)\" },\n  { name: \"Amber\", value: \"rgba(245, 158, 11, 0.3)\" },\n];\n\nexport const FONT_COLORS = [\n  { name: \"Default\", value: \"hsl(var(--foreground))\" },\n  { name: \"Muted\", value: \"hsl(var(--muted-foreground))\" },\n  { name: \"Slate\", value: \"#64748b\" },\n  { name: \"Amber\", value: \"#f59e0b\" },\n  { name: \"Emerald\", value: \"#10b981\" },\n  { name: \"Blue\", value: \"#3b82f6\" },\n  { name: \"Purple\", value: \"#8b5cf6\" },\n  { name: \"Rose\", value: \"#f43f5a\" },\n  { name: \"Indigo\", value: \"#6366f1\" },\n];\n",
      "type": "registry:lib"
    },
    {
      "path": "src/registry/new-york/blocks/editor/lib/configs.ts",
      "content": "import { nodes } from \"./nodes\";\nimport EditorTheme from \"./editor-theme\";\n\nfunction onError(error: Error) {\n  console.error(\"Lexical error:\", error);\n}\n\nexport const EDITOR_CONFIG = {\n  namespace: \"Editor\",\n  theme: EditorTheme,\n  onError,\n  nodes,\n};\n",
      "type": "registry:lib"
    },
    {
      "path": "src/registry/new-york/blocks/editor/lib/editor-theme/index.ts",
      "content": "import type { EditorThemeClasses } from \"lexical\";\n\nexport const theme: EditorThemeClasses = {\n  ltr: \"text-left\",\n  rtl: \"text-right\",\n\n  paragraph: \"m-0 mb-2 leading-relaxed relative\",\n\n  heading: {\n    h1: \"text-3xl font-bold my-4 text-foreground\",\n    h2: \"text-2xl font-semibold my-3 text-foreground/95\",\n    h3: \"text-xl font-medium my-3 text-foreground/90\",\n    h4: \"text-lg font-medium my-2 text-foreground/85\",\n    h5: \"text-base font-medium my-2 text-foreground/80\",\n    h6: \"text-sm font-medium my-2 text-foreground/80\",\n  },\n\n  quote:\n    \"ml-4 my-3 border-l-4 border-muted-foreground/30 pl-4 text-muted-foreground italic bg-muted/20 py-2 rounded-r\",\n\n  list: {\n    nested: {\n      listitem: \"list-none\",\n    },\n    olDepth: [\n      \"list-decimal list-outside ml-6\",\n      \"list-[upper-alpha] list-outside ml-6\",\n      \"list-[lower-alpha] list-outside ml-6\",\n      \"list-[upper-roman] list-outside ml-6\",\n      \"list-[lower-roman] list-outside ml-6\",\n    ],\n    ol: \"list-decimal list-outside my-2 ml-6 space-y-1\",\n    ul: \"list-disc list-outside my-2 ml-6 space-y-1\",\n    listitem: \"pl-2\",\n    listitemChecked:\n      \"relative flex items-center gap-2 list-none outline-none text-muted-foreground before:content-[''] before:flex-shrink-0 before:mt-0.5 before:size-4 before:rounded before:border before:border-primary before:bg-primary before:cursor-pointer before:flex before:items-center before:justify-center before:[content:'✓'] before:text-primary-foreground before:text-sm before:font-medium [&>span]:line-through\",\n    listitemUnchecked:\n      \"relative flex items-center gap-2 list-none outline-none before:content-[''] before:flex-shrink-0 before:mt-0.5 before:size-4 before:rounded before:border before:border-border/50 before:bg-muted before:cursor-pointer hover:before:border-border/70\",\n    checklist: \"my-2 space-y-2\",\n  },\n\n  text: {\n    bold: \"font-bold\",\n    capitalize: \"capitalize\",\n    code: \"bg-editor-muted/80 mx-1 px-1.5 py-0.5 rounded text-sm font-mono border border-border\",\n    highlight: \"bg-yellow-200/40 px-1 rounded\",\n    italic: \"italic\",\n    lowercase: \"lowercase\",\n    strikethrough: \"line-through opacity-70\",\n    subscript: \"text-xs align-sub\",\n    superscript: \"text-xs align-super\",\n    underline: \"underline decoration-2 underline-offset-2\",\n    underlineStrikethrough: \"underline line-through opacity-70\",\n    uppercase: \"uppercase\",\n  },\n\n  code: \"relative block bg-muted/50 rounded-lg overflow-x-auto my-4 text-sm leading-relaxed px-4 py-3 pl-14 font-mono border border-border\",\n  codeHighlight: {\n    atrule: \"text-blue-600 dark:text-blue-400\",\n    attr: \"text-blue-600 dark:text-blue-400\",\n    boolean: \"text-purple-600 dark:text-purple-400\",\n    builtin: \"text-green-600 dark:text-green-400\",\n    cdata: \"text-gray-500 dark:text-gray-400\",\n    char: \"text-green-600 dark:text-green-400\",\n    class: \"text-red-600 dark:text-red-400\",\n    \"class-name\": \"text-red-600 dark:text-red-400\",\n    comment: \"text-gray-500 dark:text-gray-400 italic\",\n    constant: \"text-purple-600 dark:text-purple-400\",\n    deleted: \"bg-red-100 dark:bg-red-900/30 border-red-300 dark:border-red-700\",\n    doctype: \"text-gray-500 dark:text-gray-400\",\n    entity: \"text-orange-600 dark:text-orange-400\",\n    function: \"text-red-600 dark:text-red-400\",\n    important: \"text-yellow-600 dark:text-yellow-400 font-bold\",\n    inserted:\n      \"bg-green-100 dark:bg-green-900/30 border-green-300 dark:border-green-700\",\n    keyword: \"text-blue-600 dark:text-blue-400 font-medium\",\n    namespace: \"text-yellow-600 dark:text-yellow-400\",\n    number: \"text-purple-600 dark:text-purple-400\",\n    operator: \"text-orange-600 dark:text-orange-400\",\n    prolog: \"text-gray-500 dark:text-gray-400\",\n    property: \"text-purple-600 dark:text-purple-400\",\n    punctuation: \"text-gray-600 dark:text-gray-300\",\n    regex: \"text-yellow-600 dark:text-yellow-400\",\n    selector: \"text-green-600 dark:text-green-400\",\n    string: \"text-green-600 dark:text-green-400\",\n    symbol: \"text-purple-600 dark:text-purple-400\",\n    tag: \"text-purple-600 dark:text-purple-400\",\n    unchanged:\n      \"bg-gray-100 dark:bg-gray-800 border-gray-300 dark:border-gray-600\",\n    url: \"text-orange-600 dark:text-orange-400 underline\",\n    variable: \"text-yellow-600 dark:text-yellow-400\",\n  },\n\n  link: \"text-editor-accent hover:text-editor-primary/80 underline decoration-primary/50 hover:decoration-editor-primary transition-colors duration-200 cursor-pointer\",\n\n  table:\n    \"border-collapse table-fixed w-full max-w-[80vw] my-4 border border-border rounded-lg overflow-hidden\",\n  tableAddColumns:\n    \"absolute h-full w-5 top-0 -right-5 bg-editor-muted/70 hover:bg-editor-muted cursor-pointer border-0 rounded transition-all duration-200 opacity-0 hover:opacity-100 after:content-['+'] after:absolute after:flex after:items-center after:justify-center after:w-full after:h-full after:text-editor-muted-foreground after:text-lg after:font-bold\",\n  tableAddRows:\n    \"absolute w-full h-5 left-0 -bottom-5 bg-editor-muted/70 hover:bg-editor-muted cursor-pointer border-0 rounded transition-all duration-200 opacity-0 hover:opacity-100 after:content-['+'] after:absolute after:flex after:items-center after:justify-center after:w-full after:h-full after:text-editor-muted-foreground after:text-lg after:font-bold\",\n  tableAlignment: {\n    center: \"mx-auto\",\n    right: \"ml-auto\",\n  },\n  tableCell:\n    \"border border-editor-border/60 p-3 align-top text-left relative outline-none overflow-auto min-w-[7.5rem] bg-editor-background md:min-w-[5rem] md:p-2 md:text-sm\",\n  tableCellActionButton:\n    \"absolute top-0 right-0 z-10 w-6 h-6 bg-editor-background border border-editor-border rounded-bl hover:bg-editor-muted transition-colors duration-200 flex items-center justify-center text-xs text-editor-muted-foreground hover:text-editor-foreground cursor-pointer opacity-0 group-hover:opacity-100\",\n  tableCellActionButtonContainer:\n    \"absolute top-0 right-0 w-6 h-6 pointer-events-auto\",\n  tableCellHeader:\n    \"bg-editor-muted/30 font-semibold text-editor-foreground border-b-2 border-editor-border\",\n  tableCellResizer:\n    \"absolute right-0 top-0 h-full w-1 bg-transparent cursor-col-resize hover:bg-editor-primary/50 transition-colors duration-200\",\n  tableCellSelected: \"bg-editor-primary/10 outline-2 outline-editor-primary\",\n  tableFrozenColumn:\n    \"sticky left-0 z-20 bg-editor-background border-r-2 border-editor-border shadow-sm\",\n  tableFrozenRow:\n    \"sticky top-0 z-10 bg-editor-background border-b-2 border-editor-border shadow-sm\",\n  tableRowStriping: \"even:bg-editor-muted/20 odd:bg-editor-background\",\n  tableScrollableWrapper:\n    \"overflow-x-auto border border-editor-border rounded-lg my-0 mb-6\",\n  tableSelected: \"outline-2 outline-editor-primary\",\n  tableSelection:\n    \"bg-editor-primary/10 border-2 border-editor-primary/50 rounded\",\n\n  hr: \"my-4 border relative after:content-[''] after:block\",\n  hrSelected: \"outline-2 outline-primary rounded select-none\",\n\n  hashtag:\n    \"bg-blue-100/60 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300 px-1 rounded-sm font-medium\",\n\n  blockCursor:\n    \"block absolute pointer-events-none after:content-[''] after:absolute after:block after:-top-0.5 after:w-5 after:border-t-2 after:border-foreground after:animate-[cursor-blink_1.1s_steps(2,start)_infinite]\",\n\n  characterLimit: \"bg-red-200 dark:bg-red-900/50\",\n\n  mark: \"bg-yellow-200/40 px-1 rounded\",\n  markOverlap: \"bg-yellow-300/60 px-1 rounded\",\n\n  embedBlock: {\n    base: \"select-none my-2\",\n    focus: \"outline-2 outline-editor-primary rounded\",\n  },\n\n  layoutContainer: \"grid gap-4 my-4\",\n  layoutItem:\n    \"border border-dashed border-border p-4 min-w-0 max-w-full rounded-lg\",\n\n  autocomplete: \"text-editor-muted-foreground bg-muted/50 px-2 py-1 rounded\",\n\n  tab: \"relative inline-block no-underline w-[4ch]\",\n\n  specialText:\n    \"bg-yellow-300/60 dark:bg-yellow-900/40 text-yellow-900 dark:text-yellow-100 px-1 rounded font-medium\",\n\n  image: \"max-w-full h-auto rounded-lg my-4 shadow-sm\",\n  inlineImage: \"inline-block max-h-6 rounded\",\n};\n\nexport default theme;\n",
      "type": "registry:lib"
    },
    {
      "path": "src/registry/new-york/blocks/editor/lib/hooks/use-floating-toolbar.ts",
      "content": "import { useState, useCallback, useEffect, useRef } from \"react\";\nimport { useLexicalComposerContext } from \"@lexical/react/LexicalComposerContext\";\nimport {\n  $getSelection,\n  $isRangeSelection,\n  SELECTION_CHANGE_COMMAND,\n  COMMAND_PRIORITY_LOW,\n} from \"lexical\";\nimport { mergeRegister } from \"@lexical/utils\";\n\ninterface Position {\n  top: number;\n  left: number;\n  opacity: number;\n}\n\ninterface UseFloatingToolbarReturn {\n  toolbarRef: React.RefObject<HTMLDivElement | null>;\n  isVisible: boolean;\n  position: Position;\n  activeFormats: Set<string>;\n  selectedText: string;\n}\n\nexport function useFloatingToolbar(): UseFloatingToolbarReturn {\n  const [editor] = useLexicalComposerContext();\n  const toolbarRef = useRef<HTMLDivElement>(null);\n  const timeoutRef = useRef<NodeJS.Timeout>(null);\n\n  const [activeFormats, setActiveFormats] = useState<Set<string>>(new Set());\n  const [isVisible, setIsVisible] = useState(false);\n  const [selectedText, setSelectedText] = useState(\"\");\n  const [position, setPosition] = useState<Position>({\n    top: -1000,\n    left: -1000,\n    opacity: 0,\n  });\n\n  const calculatePosition = useCallback((rect: DOMRect): Position => {\n    const toolbar = toolbarRef.current;\n    if (!toolbar) return { top: -1000, left: -1000, opacity: 0 };\n\n    const toolbarRect = toolbar.getBoundingClientRect();\n    const viewport = {\n      width: window.innerWidth,\n      height: window.innerHeight,\n    };\n\n    let top = rect.top + window.scrollY - toolbarRect.height - 10;\n    let left =\n      rect.left + window.scrollX + rect.width / 2 - toolbarRect.width / 2;\n\n    if (left < 10) {\n      left = 10;\n    } else if (left + toolbarRect.width > viewport.width - 10) {\n      left = viewport.width - toolbarRect.width - 10;\n    }\n\n    if (top < window.scrollY + 10) {\n      top = rect.bottom + window.scrollY + 10;\n    }\n\n    return { top, left, opacity: 1 };\n  }, []);\n\n  const updateToolbar = useCallback(() => {\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n\n    editor.read(() => {\n      const selection = $getSelection();\n\n      if (\n        $isRangeSelection(selection) &&\n        !selection.isCollapsed() &&\n        selection.getTextContent().trim() !== \"\"\n      ) {\n        const nativeSelection = window.getSelection();\n        if (!nativeSelection || nativeSelection.rangeCount === 0) {\n          setIsVisible(false);\n          return;\n        }\n\n        const domRange = nativeSelection.getRangeAt(0);\n        const rect = domRange.getBoundingClientRect();\n        const text = selection.getTextContent().trim();\n\n        if (text.length < 2) {\n          setIsVisible(false);\n          return;\n        }\n\n        setSelectedText(text);\n\n        const formats = new Set<string>();\n        if (selection.hasFormat(\"bold\")) formats.add(\"bold\");\n        if (selection.hasFormat(\"italic\")) formats.add(\"italic\");\n        if (selection.hasFormat(\"underline\")) formats.add(\"underline\");\n        if (selection.hasFormat(\"code\")) formats.add(\"code\");\n        if (selection.hasFormat(\"strikethrough\")) formats.add(\"strikethrough\");\n        if (selection.hasFormat(\"superscript\")) formats.add(\"superscript\");\n        if (selection.hasFormat(\"subscript\")) formats.add(\"subscript\");\n\n        setActiveFormats(formats);\n\n        setIsVisible(true);\n\n        requestAnimationFrame(() => {\n          const newPosition = calculatePosition(rect);\n          setPosition(newPosition);\n        });\n      } else {\n        timeoutRef.current = setTimeout(() => {\n          setIsVisible(false);\n          setPosition((prev) => ({ ...prev, opacity: 0 }));\n        }, 100);\n      }\n    });\n  }, [editor, calculatePosition]);\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      const target = event.target as Node;\n      const editorRoot = editor.getRootElement();\n\n      if (\n        isVisible &&\n        toolbarRef.current &&\n        !toolbarRef.current.contains(target) &&\n        !editorRoot?.contains(target)\n      ) {\n        setIsVisible(false);\n      }\n    };\n\n    const handleScroll = () => {\n      if (isVisible) {\n        updateToolbar();\n      }\n    };\n\n    const handleResize = () => {\n      if (isVisible) {\n        const nativeSelection = window.getSelection();\n        if (nativeSelection && nativeSelection.rangeCount > 0) {\n          const domRange = nativeSelection.getRangeAt(0);\n          const rect = domRange.getBoundingClientRect();\n          const newPosition = calculatePosition(rect);\n          setPosition(newPosition);\n        }\n      }\n    };\n\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    window.addEventListener(\"scroll\", handleScroll, { passive: true });\n    window.addEventListener(\"resize\", handleResize, { passive: true });\n\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n      window.removeEventListener(\"scroll\", handleScroll);\n      window.removeEventListener(\"resize\", handleResize);\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  }, [editor, isVisible, updateToolbar, calculatePosition]);\n\n  useEffect(() => {\n    return mergeRegister(\n      editor.registerUpdateListener(({ editorState }) => {\n        editorState.read(updateToolbar);\n      }),\n      editor.registerCommand(\n        SELECTION_CHANGE_COMMAND,\n        () => {\n          updateToolbar();\n          return false;\n        },\n        COMMAND_PRIORITY_LOW\n      )\n    );\n  }, [editor, updateToolbar]);\n\n  return {\n    toolbarRef,\n    isVisible,\n    position,\n    activeFormats,\n    selectedText,\n  };\n}\n",
      "type": "registry:hook"
    },
    {
      "path": "src/registry/new-york/blocks/editor/lib/nodes/image-node.tsx",
      "content": "import type { JSX } from \"react\";\nimport { DecoratorNode } from \"lexical\";\nimport Image from \"next/image\";\n\nimport type { ImageNodeSerialized } from \"../types/editor\";\n\nexport class ImageNode extends DecoratorNode<JSX.Element> {\n  __src: string;\n  __alt: string;\n\n  static getType(): string {\n    return \"image\";\n  }\n\n  static clone(node: ImageNode): ImageNode {\n    return new ImageNode(node.__src, node.__alt, node.__key);\n  }\n\n  static importJSON(serializedNode: ImageNodeSerialized): ImageNode {\n    const { src, alt } = serializedNode;\n    return new ImageNode(src, alt);\n  }\n\n  exportJSON(): ImageNodeSerialized {\n    return {\n      type: \"image\",\n      version: 1,\n      src: this.__src,\n      alt: this.__alt,\n    } as ImageNodeSerialized;\n  }\n\n  constructor(src: string, alt = \"Image\", key?: string) {\n    super(key);\n    this.__src = src;\n    this.__alt = alt;\n  }\n\n  createDOM(): HTMLElement {\n    const div = document.createElement(\"div\");\n    div.className = \"image-node\";\n    return div;\n  }\n\n  updateDOM(): boolean {\n    return false;\n  }\n\n  decorate(): JSX.Element {\n    return (\n      <Image\n        src={this.__src || \"/placeholder.svg\"}\n        alt={this.__alt}\n        width={500}\n        height={500}\n        // onError={() => setIsLoadError(true)}\n      />\n    );\n  }\n}\n\nexport function $createImageNode(src: string, alt?: string): ImageNode {\n  return new ImageNode(src, alt);\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/new-york/blocks/editor/lib/nodes/index.ts",
      "content": "import { HeadingNode, QuoteNode } from \"@lexical/rich-text\";\nimport { ListItemNode, ListNode } from \"@lexical/list\";\nimport { CodeHighlightNode, CodeNode } from \"@lexical/code\";\nimport { LinkNode, AutoLinkNode } from \"@lexical/link\";\nimport { HorizontalRuleNode } from \"@lexical/react/LexicalHorizontalRuleNode\";\nimport { TableCellNode, TableNode, TableRowNode } from \"@lexical/table\";\nimport { ImageNode } from \"./image-node\";\n\nexport const nodes = [\n  HeadingNode,\n  ListNode,\n  ListItemNode,\n  QuoteNode,\n  CodeNode,\n  CodeHighlightNode,\n  LinkNode,\n  AutoLinkNode,\n  HorizontalRuleNode,\n  TableNode,\n  TableCellNode,\n  TableRowNode,\n  ImageNode,\n];\n",
      "type": "registry:lib"
    },
    {
      "path": "src/registry/new-york/blocks/editor/lib/types/editor.ts",
      "content": "import type { SerializedLexicalNode } from \"lexical\";\n\nexport type ImageNodeSerialized = {\n  src: string;\n  alt: string;\n  type: string;\n  version: 1;\n} & SerializedLexicalNode;\n\nexport interface EditorProps {\n  initialValue?: string;\n  placeholder?: string;\n  className?: string;\n  minHeight?: string;\n  maxHeight?: string;\n  showToolbar?: boolean;\n  showFloatingToolbar?: boolean;\n  readOnly?: boolean;\n  autoFocus?: boolean;\n  onChange?: (value: string) => void;\n  onBlur?: () => void;\n  onFocus?: () => void;\n  plugins?: React.ComponentType[];\n  theme?: Record<string, string>;\n}\n",
      "type": "registry:lib"
    },
    {
      "path": "src/registry/new-york/blocks/editor/lib/utils/export.ts",
      "content": "import type { LexicalEditor } from \"lexical\";\nimport { $generateHtmlFromNodes } from \"@lexical/html\";\nimport { $convertToMarkdownString } from \"@lexical/markdown\";\nimport { TRANSFORMERS } from \"@lexical/markdown\";\nimport { $getRoot } from \"lexical\";\n\nfunction download(filename: string, text: string) {\n  const element = document.createElement(\"a\");\n  element.setAttribute(\n    \"href\",\n    \"data:text/plain;charset=utf-8,\" + encodeURIComponent(text)\n  );\n  element.setAttribute(\"download\", filename);\n\n  element.style.display = \"none\";\n  document.body.appendChild(element);\n\n  element.click();\n\n  document.body.removeChild(element);\n}\n\nexport function exportAsHTML(editor: LexicalEditor) {\n  editor.update(() => {\n    const htmlString = $generateHtmlFromNodes(editor, null);\n    download(\"editor-content.html\", htmlString);\n  });\n}\n\nexport function exportAsMarkdown(editor: LexicalEditor) {\n  editor.update(() => {\n    const markdown = $convertToMarkdownString(TRANSFORMERS);\n    download(\"editor-content.md\", markdown);\n  });\n}\n\nexport function copyAsPlainText(editor: LexicalEditor) {\n  editor.getEditorState().read(() => {\n    const text = $getRoot().getTextContent();\n    navigator.clipboard.writeText(text);\n  });\n}\n",
      "type": "registry:lib"
    },
    {
      "path": "src/registry/new-york/blocks/editor/lib/utils/import.ts",
      "content": "import type { LexicalEditor } from \"lexical\";\nimport { $convertFromMarkdownString } from \"@lexical/markdown\";\nimport { TRANSFORMERS } from \"@lexical/markdown\";\n\nexport function importMarkdown(editor: LexicalEditor, file: File) {\n  const reader = new FileReader();\n  reader.onload = (e) => {\n    const text = e.target?.result as string;\n    if (text) {\n      editor.update(() => {\n        $convertFromMarkdownString(text, TRANSFORMERS);\n      });\n    }\n  };\n  reader.readAsText(file);\n}\n",
      "type": "registry:lib"
    },
    {
      "path": "src/registry/new-york/blocks/editor/lib/utils/index.ts",
      "content": "export * from \"./export\";\nexport * from \"./import\";\n",
      "type": "registry:lib"
    },
    {
      "path": "src/registry/new-york/blocks/editor/plugins/floating-toolbar/index.tsx",
      "content": "import { createPortal } from \"react-dom\";\nimport { useLexicalComposerContext } from \"@lexical/react/LexicalComposerContext\";\nimport {\n  $getSelection,\n  $isRangeSelection,\n  FORMAT_TEXT_COMMAND,\n  type TextFormatType,\n} from \"lexical\";\nimport { $patchStyleText } from \"@lexical/selection\";\nimport {\n  Bold,\n  Italic,\n  Underline,\n  Code,\n  Highlighter,\n  Strikethrough,\n  Subscript,\n  Superscript,\n  Palette,\n  type LucideIcon,\n} from \"lucide-react\";\nimport { useCallback, useMemo } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n  DropdownMenuSeparator,\n} from \"@/components/ui/dropdown-menu\";\nimport { useFloatingToolbar } from \"../../lib/hooks/use-floating-toolbar\";\nimport Separator from \"../../components/toolbar-separator\";\n\nconst HIGHLIGHT_COLORS = [\n  { name: \"Yellow\", value: \"#fef08a\" },\n  { name: \"Green\", value: \"#bbf7d0\" },\n  { name: \"Blue\", value: \"#bfdbfe\" },\n  { name: \"Purple\", value: \"#e9d5ff\" },\n  { name: \"Pink\", value: \"#fce7f3\" },\n  { name: \"Orange\", value: \"#fed7aa\" },\n];\n\ninterface FormatItem {\n  name: string;\n  icon: LucideIcon;\n  format: string;\n  group: \"basic\" | \"script\" | \"special\";\n}\n\nconst FORMAT_ITEMS: FormatItem[] = [\n  { name: \"Bold\", icon: Bold, format: \"bold\", group: \"basic\" },\n  { name: \"Italic\", icon: Italic, format: \"italic\", group: \"basic\" },\n  { name: \"Underline\", icon: Underline, format: \"underline\", group: \"basic\" },\n  {\n    name: \"Strikethrough\",\n    icon: Strikethrough,\n    format: \"strikethrough\",\n    group: \"basic\",\n  },\n  { name: \"Code\", icon: Code, format: \"code\", group: \"special\" },\n  {\n    name: \"Superscript\",\n    icon: Superscript,\n    format: \"superscript\",\n    group: \"script\",\n  },\n  { name: \"Subscript\", icon: Subscript, format: \"subscript\", group: \"script\" },\n];\n\ninterface ToolbarButtonProps {\n  onClick: () => void;\n  isActive: boolean;\n  icon: LucideIcon;\n  title: string;\n  disabled?: boolean;\n}\n\nfunction ToolbarButton({\n  onClick,\n  isActive,\n  icon: Icon,\n  title,\n  disabled,\n}: ToolbarButtonProps) {\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"sm\"\n      className={`\n        h-8 w-8 p-0 transition-all duration-150\n        ${\n          isActive\n            ? \"bg-primary text-primary-foreground shadow-sm\"\n            : \"hover:bg-muted\"\n        }\n        ${disabled ? \"opacity-50 cursor-not-allowed\" : \"\"}\n      `}\n      onClick={onClick}\n      disabled={disabled}\n      title={title}\n      onMouseDown={(e) => e.preventDefault()}\n    >\n      <Icon className=\"size-4\" />\n    </Button>\n  );\n}\n\nexport function FloatingToolbar() {\n  const [editor] = useLexicalComposerContext();\n  const { toolbarRef, isVisible, position, activeFormats, selectedText } =\n    useFloatingToolbar();\n\n  const formatText = useCallback(\n    (format: string) => {\n      editor.dispatchCommand(FORMAT_TEXT_COMMAND, format as TextFormatType);\n      editor.focus();\n    },\n    [editor]\n  );\n\n  const formatHighlight = useCallback(\n    (color: string) => {\n      editor.update(() => {\n        const selection = $getSelection();\n        if ($isRangeSelection(selection)) {\n          $patchStyleText(selection, {\n            \"background-color\": color || \"transparent\",\n          });\n        }\n      });\n      editor.focus();\n    },\n    [editor]\n  );\n\n  const groupedItems = useMemo(() => {\n    const groups = FORMAT_ITEMS.reduce((acc, item) => {\n      if (!acc[item.group]) acc[item.group] = [];\n      acc[item.group].push(item);\n      return acc;\n    }, {} as Record<string, FormatItem[]>);\n\n    return groups;\n  }, []);\n\n  if (!isVisible) return null;\n\n  return createPortal(\n    <div\n      ref={toolbarRef}\n      className=\"absolute z-50 flex items-center gap-1 p-2 bg-popover/95 backdrop-blur-md border border-border/50 rounded-lg shadow-lg transition-all duration-200 ease-out\"\n      style={{\n        top: `${position.top}px`,\n        left: `${position.left}px`,\n        opacity: position.opacity,\n        transform: position.opacity === 1 ? \"scale(1)\" : \"scale(0.95)\",\n      }}\n      onMouseDown={(e) => e.preventDefault()}\n    >\n      {groupedItems.basic?.map((item) => (\n        <ToolbarButton\n          key={item.name}\n          onClick={() => formatText(item.format)}\n          isActive={activeFormats.has(item.format)}\n          icon={item.icon}\n          title={item.name}\n        />\n      ))}\n\n      <Separator />\n\n      {groupedItems.special?.map((item) => (\n        <ToolbarButton\n          key={item.name}\n          onClick={() => formatText(item.format)}\n          isActive={activeFormats.has(item.format)}\n          icon={item.icon}\n          title={item.name}\n        />\n      ))}\n\n      <Separator />\n\n      {groupedItems.script?.map((item) => (\n        <ToolbarButton\n          key={item.name}\n          onClick={() => formatText(item.format)}\n          isActive={activeFormats.has(item.format)}\n          icon={item.icon}\n          title={item.name}\n        />\n      ))}\n\n      <Separator />\n\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"h-8 w-8 p-0 hover:bg-muted\"\n            title=\"Highlight\"\n          >\n            <Highlighter className=\"size-4\" />\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent\n          className=\"w-48 animate-in slide-in-from-top-2 duration-200\"\n          align=\"center\"\n        >\n          <div className=\"grid grid-cols-3 gap-1 p-2\">\n            {HIGHLIGHT_COLORS.map((color) => (\n              <button\n                key={color.value}\n                onClick={() => formatHighlight(color.value)}\n                className=\"flex flex-col items-center gap-1 p-2 rounded hover:bg-muted/50 transition-colors\"\n                title={color.name}\n              >\n                <div\n                  className=\"w-6 h-4 rounded border border-border/50 shadow-sm\"\n                  style={{ backgroundColor: color.value }}\n                />\n                <span className=\"text-xs text-muted-foreground\">\n                  {color.name}\n                </span>\n              </button>\n            ))}\n          </div>\n          <DropdownMenuSeparator />\n          <DropdownMenuItem\n            onClick={() => formatHighlight(\"\")}\n            className=\"flex items-center gap-2\"\n          >\n            <Palette className=\"size-4\" />\n            Remove Highlight\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n\n      {selectedText.length > 50 && (\n        <>\n          <Separator />\n          <div className=\"text-xs text-muted-foreground px-2\">\n            {selectedText.length} chars\n          </div>\n        </>\n      )}\n    </div>,\n    document.body\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/new-york/blocks/editor/plugins/slash-command/index.tsx",
      "content": "import { useLexicalComposerContext } from \"@lexical/react/LexicalComposerContext\";\nimport {\n  LexicalTypeaheadMenuPlugin,\n  useBasicTypeaheadTriggerMatch,\n  MenuOption,\n} from \"@lexical/react/LexicalTypeaheadMenuPlugin\";\nimport { TextNode } from \"lexical\";\nimport { useCallback, useMemo, useState } from \"react\";\nimport { SLASH_COMMANDS, type SlashCommand } from \"./slash-command-items\";\nimport { createPortal } from \"react-dom\";\nimport { SlashCommandMenuItem } from \"./slash-command-menu-item\";\n\nclass SlashCommandOption extends MenuOption {\n  command: SlashCommand;\n\n  constructor(command: SlashCommand) {\n    super(command.title);\n    this.command = command;\n  }\n}\n\nexport default function SlashCommandPlugin() {\n  const [editor] = useLexicalComposerContext();\n  const [query, setQuery] = useState<string | null>(null);\n\n  const triggerFn = useBasicTypeaheadTriggerMatch(\"/\", { minLength: 0 });\n\n  const options = useMemo(() => {\n    const filteredCommands = query\n      ? SLASH_COMMANDS.filter(\n          (cmd) =>\n            cmd.title.toLowerCase().includes(query.toLowerCase()) ||\n            cmd.keywords.some((keyword) =>\n              keyword.toLowerCase().includes(query.toLowerCase())\n            )\n        )\n      : SLASH_COMMANDS;\n\n    return filteredCommands.map((cmd) => new SlashCommandOption(cmd));\n  }, [query]);\n\n  const onSelectOption = useCallback(\n    (\n      option: SlashCommandOption,\n      nodeToRemove: TextNode | null,\n      closeMenu: () => void\n    ) => {\n      editor.update(() => {\n        nodeToRemove?.remove();\n        option.command.action(editor);\n        closeMenu();\n      });\n    },\n    [editor]\n  );\n\n  return (\n    <LexicalTypeaheadMenuPlugin\n      onQueryChange={setQuery}\n      onSelectOption={onSelectOption}\n      triggerFn={triggerFn}\n      options={options}\n      menuRenderFn={(\n        anchorElementRef,\n        { selectedIndex, selectOptionAndCleanUp, setHighlightedIndex }\n      ) => {\n        const anchorElement = anchorElementRef.current;\n\n        if (!anchorElement || options.length === 0) {\n          return null;\n        }\n\n        const rect = anchorElement.getBoundingClientRect();\n\n        return createPortal(\n          <div\n            className=\"mt-1 absolute z-50 w-44 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border bg-popover p-1 shadow-md\"\n            style={{\n              top: rect.bottom + window.scrollY + 1,\n              left: rect.left + window.scrollX,\n            }}\n            onMouseDown={(e) => e.preventDefault()}\n          >\n            {options.map((option, i) => (\n              <SlashCommandMenuItem\n                isSelected={selectedIndex === i}\n                onClick={() => {\n                  setHighlightedIndex(i);\n                  selectOptionAndCleanUp(option);\n                }}\n                onMouseEnter={() => {\n                  setHighlightedIndex(i);\n                }}\n                key={option.key}\n                command={option.command}\n              />\n            ))}\n          </div>,\n          document.body\n        );\n      }}\n    />\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/new-york/blocks/editor/plugins/slash-command/slash-command-items.ts",
      "content": "import {\n  Heading1,\n  Heading2,\n  Heading3,\n  List,\n  ListOrdered,\n  ListChecks,\n  Quote,\n  CodeSquare,\n  Minus,\n  Type,\n} from \"lucide-react\";\nimport { $createHeadingNode, $createQuoteNode } from \"@lexical/rich-text\";\nimport { $createCodeNode } from \"@lexical/code\";\nimport {\n  INSERT_UNORDERED_LIST_COMMAND,\n  INSERT_ORDERED_LIST_COMMAND,\n  INSERT_CHECK_LIST_COMMAND,\n} from \"@lexical/list\";\nimport { INSERT_HORIZONTAL_RULE_COMMAND } from \"@lexical/react/LexicalHorizontalRuleNode\";\nimport { $setBlocksType } from \"@lexical/selection\";\nimport {\n  $createParagraphNode,\n  $getSelection,\n  $isRangeSelection,\n  type LexicalEditor,\n} from \"lexical\";\n\nexport interface SlashCommand {\n  title: string;\n  icon: React.ComponentType<{ className?: string }>;\n  action: (editor: LexicalEditor) => void;\n  keywords: string[];\n}\n\nexport const SLASH_COMMANDS: SlashCommand[] = [\n  {\n    title: \"Text\",\n    icon: Type,\n    action: (editor) => {\n      editor.update(() => {\n        const selection = $getSelection();\n        if ($isRangeSelection(selection)) {\n          $setBlocksType(selection, () => $createParagraphNode());\n        }\n      });\n    },\n    keywords: [\"paragraph\", \"p\", \"text\"],\n  },\n  {\n    title: \"Heading 1\",\n    icon: Heading1,\n    action: (editor) => {\n      editor.update(() => {\n        const selection = $getSelection();\n        if ($isRangeSelection(selection)) {\n          $setBlocksType(selection, () => $createHeadingNode(\"h1\"));\n        }\n      });\n    },\n    keywords: [\"heading\", \"h1\"],\n  },\n  {\n    title: \"Heading 2\",\n    icon: Heading2,\n    action: (editor) => {\n      editor.update(() => {\n        const selection = $getSelection();\n        if ($isRangeSelection(selection)) {\n          $setBlocksType(selection, () => $createHeadingNode(\"h2\"));\n        }\n      });\n    },\n    keywords: [\"heading\", \"h2\"],\n  },\n  {\n    title: \"Heading 3\",\n    icon: Heading3,\n    action: (editor) => {\n      editor.update(() => {\n        const selection = $getSelection();\n        if ($isRangeSelection(selection)) {\n          $setBlocksType(selection, () => $createHeadingNode(\"h3\"));\n        }\n      });\n    },\n    keywords: [\"heading\", \"h3\"],\n  },\n  {\n    title: \"Bulleted List\",\n    icon: List,\n    action: (editor) => {\n      editor.dispatchCommand(INSERT_UNORDERED_LIST_COMMAND, undefined);\n    },\n    keywords: [\"list\", \"bulleted\", \"ul\"],\n  },\n  {\n    title: \"Numbered List\",\n    icon: ListOrdered,\n    action: (editor) => {\n      editor.dispatchCommand(INSERT_ORDERED_LIST_COMMAND, undefined);\n    },\n    keywords: [\"list\", \"numbered\", \"ol\"],\n  },\n  {\n    title: \"Check List\",\n    icon: ListChecks,\n    action: (editor) => {\n      editor.dispatchCommand(INSERT_CHECK_LIST_COMMAND, undefined);\n    },\n    keywords: [\"list\", \"check\", \"todo\"],\n  },\n  {\n    title: \"Quote\",\n    icon: Quote,\n    action: (editor) => {\n      editor.update(() => {\n        const selection = $getSelection();\n        if ($isRangeSelection(selection)) {\n          $setBlocksType(selection, () => $createQuoteNode());\n        }\n      });\n    },\n    keywords: [\"quote\", \"blockquote\"],\n  },\n  {\n    title: \"Code Block\",\n    icon: CodeSquare,\n    action: (editor) => {\n      editor.update(() => {\n        const selection = $getSelection();\n        if ($isRangeSelection(selection)) {\n          $setBlocksType(selection, () => $createCodeNode());\n        }\n      });\n    },\n    keywords: [\"code\", \"codeblock\"],\n  },\n  {\n    title: \"Divider\",\n    icon: Minus,\n    action: (editor) => {\n      editor.dispatchCommand(INSERT_HORIZONTAL_RULE_COMMAND, undefined);\n    },\n    keywords: [\"divider\", \"hr\", \"horizontal rule\"],\n  },\n];\n",
      "type": "registry:lib"
    },
    {
      "path": "src/registry/new-york/blocks/editor/plugins/slash-command/slash-command-menu-item.tsx",
      "content": "import type { SlashCommand } from \"./slash-command-items\";\n\ninterface SlashCommandMenuItemProps {\n  command: SlashCommand;\n  isSelected: boolean;\n  onClick: () => void;\n  onMouseEnter: () => void;\n}\n\nexport function SlashCommandMenuItem({\n  command,\n  isSelected,\n  onClick,\n  onMouseEnter,\n}: SlashCommandMenuItemProps) {\n  const Icon = command.icon;\n  return (\n    <li\n      className={`flex items-center group gap-3 p-2 rounded-md cursor-pointer transition-colors ${\n        isSelected ? \"bg-muted\" : \"hover:bg-muted/50\"\n      }`}\n      onClick={onClick}\n      onMouseEnter={onMouseEnter}\n      role=\"option\"\n      aria-selected={isSelected}\n      tabIndex={-1}\n    >\n      <Icon className=\"size-4 text-popover-foreground/80 group-hover:text-popover-foreground\" />\n      <span className=\"text-sm text-popover-foreground/80 group-hover:text-popover-foreground\">\n        {command.title}\n      </span>\n    </li>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/new-york/blocks/editor/plugins/table-hover-actions/index.tsx",
      "content": "import { useLexicalComposerContext } from \"@lexical/react/LexicalComposerContext\";\nimport { useEffect, useState, useRef } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport { $getNearestNodeFromDOMNode, $getNodeByKey } from \"lexical\";\nimport {\n  $deleteTableColumnAtSelection,\n  $deleteTableRowAtSelection,\n  $insertTableColumnAtSelection,\n  $insertTableRowAtSelection,\n  $isTableCellNode,\n  $isTableNode,\n  $isTableRowNode,\n  TableNode,\n} from \"@lexical/table\";\n\nimport { MoreHorizontal } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n  DropdownMenuSeparator,\n} from \"@/components/ui/dropdown-menu\";\n\nexport default function TableHoverActionsPlugin() {\n  const [editor] = useLexicalComposerContext();\n  const [hoveredTable, setHoveredTable] = useState<{\n    node: TableNode;\n    dom: HTMLElement;\n  } | null>(null);\n  const actionButtonRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const handlePointerMove = (event: PointerEvent) => {\n      const target = event.target as HTMLElement;\n      const table = target.closest(\"table\");\n\n      if (table) {\n        editor.update(() => {\n          const tableNode = $getNearestNodeFromDOMNode(table);\n          if (tableNode && $isTableNode(tableNode)) {\n            setHoveredTable({ node: tableNode, dom: table });\n          } else {\n            setHoveredTable(null);\n          }\n        });\n      } else {\n        setHoveredTable(null);\n      }\n    };\n\n    const editorRoot = editor.getRootElement();\n    editorRoot?.addEventListener(\"pointermove\", handlePointerMove);\n\n    return () => {\n      editorRoot?.removeEventListener(\"pointermove\", handlePointerMove);\n    };\n  }, [editor]);\n\n  useEffect(() => {\n    if (hoveredTable && actionButtonRef.current) {\n      const { dom } = hoveredTable;\n      const rect = dom.getBoundingClientRect();\n      const actionButton = actionButtonRef.current;\n      actionButton.style.top = `${rect.top + window.scrollY - 20}px`;\n      actionButton.style.left = `${rect.right + window.scrollX - 20}px`;\n    }\n  }, [hoveredTable]);\n\n  const modifyTable = (action: string) => {\n    if (hoveredTable) {\n      editor.update(() => {\n        const tableNode = $getNodeByKey(hoveredTable.node.getKey());\n        if (!$isTableNode(tableNode)) return;\n\n        const firstRow = tableNode.getFirstChild();\n        const lastRow = tableNode.getLastChild();\n\n        switch (action) {\n          case \"delete-table\":\n            tableNode.remove();\n            break;\n          case \"add-row-start\":\n            if ($isTableRowNode(firstRow)) {\n              const firstCell = firstRow.getFirstChild();\n              if ($isTableCellNode(firstCell)) firstCell.selectStart();\n            }\n            $insertTableRowAtSelection(true);\n            break;\n          case \"add-row-end\":\n            if ($isTableRowNode(lastRow)) {\n              const lastCell = lastRow.getLastChild();\n              if ($isTableCellNode(lastCell)) lastCell.selectEnd();\n            }\n            $insertTableRowAtSelection(false);\n            break;\n          case \"delete-row-start\":\n            if ($isTableRowNode(firstRow)) {\n              const firstCell = firstRow.getFirstChild();\n              if ($isTableCellNode(firstCell)) firstCell.select();\n              $deleteTableRowAtSelection();\n            }\n            break;\n          case \"delete-row-end\":\n            if ($isTableRowNode(lastRow)) {\n              const lastCell = lastRow.getLastChild();\n              if ($isTableCellNode(lastCell)) lastCell.select();\n              $deleteTableRowAtSelection();\n            }\n            break;\n          case \"add-col-start\":\n            if ($isTableRowNode(firstRow)) {\n              const firstCell = firstRow.getFirstChild();\n              if ($isTableCellNode(firstCell)) firstCell.selectStart();\n            }\n            $insertTableColumnAtSelection(true);\n            break;\n          case \"add-col-end\":\n            if ($isTableRowNode(lastRow)) {\n              const lastCell = lastRow.getLastChild();\n              if ($isTableCellNode(lastCell)) lastCell.selectEnd();\n            }\n            $insertTableColumnAtSelection(false);\n            break;\n          case \"delete-col-start\":\n            if ($isTableRowNode(firstRow)) {\n              const firstCell = firstRow.getFirstChild();\n              if ($isTableCellNode(firstCell)) firstCell.select();\n              $deleteTableColumnAtSelection();\n            }\n            break;\n          case \"delete-col-end\":\n            if ($isTableRowNode(lastRow)) {\n              const lastCell = lastRow.getLastChild();\n              if ($isTableCellNode(lastCell)) lastCell.select();\n              $deleteTableColumnAtSelection();\n            }\n            break;\n        }\n      });\n    }\n  };\n\n  if (!hoveredTable) {\n    return null;\n  }\n\n  return createPortal(\n    <div ref={actionButtonRef} style={{ position: \"absolute\", zIndex: 100 }}>\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <div>\n            <Button variant=\"ghost\" size=\"icon\" className=\"rounded-full\">\n              <MoreHorizontal className=\"size-4\" />\n            </Button>\n          </div>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent>\n          <DropdownMenuItem onClick={() => modifyTable(\"delete-table\")}>\n            Delete Table\n          </DropdownMenuItem>\n          <DropdownMenuSeparator />\n          <DropdownMenuItem onClick={() => modifyTable(\"add-row-start\")}>\n            Add Row Above\n          </DropdownMenuItem>\n          <DropdownMenuItem onClick={() => modifyTable(\"add-row-end\")}>\n            Add Row Below\n          </DropdownMenuItem>\n          <DropdownMenuItem onClick={() => modifyTable(\"delete-row-start\")}>\n            Delete First Row\n          </DropdownMenuItem>\n          <DropdownMenuItem onClick={() => modifyTable(\"delete-row-end\")}>\n            Delete Last Row\n          </DropdownMenuItem>\n          <DropdownMenuSeparator />\n          <DropdownMenuItem onClick={() => modifyTable(\"add-col-start\")}>\n            Add Column Before\n          </DropdownMenuItem>\n          <DropdownMenuItem onClick={() => modifyTable(\"add-col-end\")}>\n            Add Column After\n          </DropdownMenuItem>\n          <DropdownMenuItem onClick={() => modifyTable(\"delete-col-start\")}>\n            Delete First Column\n          </DropdownMenuItem>\n          <DropdownMenuItem onClick={() => modifyTable(\"delete-col-end\")}>\n            Delete Last Column\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n    </div>,\n    document.body\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/new-york/blocks/editor/plugins/toolbar/index.tsx",
      "content": "import { useState, useCallback, useEffect, useReducer } from \"react\";\nimport { useLexicalComposerContext } from \"@lexical/react/LexicalComposerContext\";\n\nimport {\n  $getSelection,\n  $isRangeSelection,\n  SELECTION_CHANGE_COMMAND,\n  CAN_UNDO_COMMAND,\n  CAN_REDO_COMMAND,\n  COMMAND_PRIORITY_CRITICAL,\n  type ElementNode,\n  type TextNode,\n} from \"lexical\";\nimport { $patchStyleText } from \"@lexical/selection\";\nimport { BlockFormatDropDown } from \"./extensions/block-format-dropdown\";\nimport { $isListNode, ListNode } from \"@lexical/list\";\nimport { $isCodeNode } from \"@lexical/code\";\nimport { TOGGLE_LINK_COMMAND, $isLinkNode } from \"@lexical/link\";\nimport { INSERT_TABLE_COMMAND, $isTableCellNode } from \"@lexical/table\";\nimport {\n  $getNearestNodeOfType,\n  mergeRegister,\n  $findMatchingParent,\n} from \"@lexical/utils\";\nimport { LinkIcon, Highlighter, Github } from \"lucide-react\";\nimport { FileActions } from \"./extensions/file-actions\";\nimport { TableButtons } from \"./extensions/table-buttons\";\nimport { InsertDropDown } from \"./extensions/insert-actions\";\nimport { AlignButtons } from \"./extensions/align-buttons\";\nimport { TextFormatButtons } from \"./extensions/text-format-buttons\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n  DropdownMenuSeparator,\n} from \"@/components/ui/dropdown-menu\";\nimport { LinkDialog, TableDialog, ImageDialog } from \"../../components\";\nimport { $createImageNode } from \"../../lib/nodes/image-node\";\nimport { HIGHLIGHT_COLORS } from \"../../lib/colors\";\nimport { ColorPicker } from \"./extensions/color-picker\";\nimport { HistoryButtons } from \"./extensions/history-buttons\";\nimport { ListButtons } from \"./extensions/list-buttons\";\nimport { BlockTypeButtons } from \"./extensions/block-type-buttons\";\nimport { $isHeadingNode, $isQuoteNode } from \"@lexical/rich-text\";\nimport Separator from \"../../components/toolbar-separator\";\nimport { ModeToggle } from \"../../components/theme-toggler\";\n\nconst initialState = {\n  isBold: false,\n  isItalic: false,\n  isUnderline: false,\n  isStrikethrough: false,\n  isCode: false,\n  isLink: false,\n  isHighlight: false,\n  isSubscript: false,\n  isSuperscript: false,\n  isCapitalized: false,\n  isTable: false,\n  isBulletedList: false,\n  isNumberedList: false,\n  isCheckList: false,\n  isQuote: false,\n  isCodeBlock: false,\n  blockType: \"paragraph\",\n  canUndo: false,\n  canRedo: false,\n};\n\nexport type ToolbarState = typeof initialState;\ntype Action =\n  | { type: \"UPDATE\"; payload: Partial<ToolbarState> }\n  | { type: \"SET_CAN_UNDO\"; payload: boolean }\n  | { type: \"SET_CAN_REDO\"; payload: boolean };\n\nconst toolbarReducer = (state: ToolbarState, action: Action): ToolbarState => {\n  switch (action.type) {\n    case \"UPDATE\":\n      return { ...state, ...action.payload };\n    case \"SET_CAN_UNDO\":\n      return { ...state, canUndo: action.payload };\n    case \"SET_CAN_REDO\":\n      return { ...state, canRedo: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport function Toolbar() {\n  const [editor] = useLexicalComposerContext();\n  const [toolbarState, dispatch] = useReducer(toolbarReducer, initialState);\n  const [showLinkDialog, setShowLinkDialog] = useState(false);\n  const [showTableDialog, setShowTableDialog] = useState(false);\n  const [showImageDialog, setShowImageDialog] = useState(false);\n\n  const updateToolbar = useCallback(() => {\n    editor.read(() => {\n      const selection = $getSelection();\n      const newToolbarState = {\n        isBulletedList: false,\n        isNumberedList: false,\n        isCheckList: false,\n        isQuote: false,\n        isCodeBlock: false,\n        isStrikethrough: false,\n        isBold: false,\n        isItalic: false,\n        isUnderline: false,\n        isCode: false,\n        isLink: false,\n        isHighlight: false,\n        isSubscript: false,\n        isSuperscript: false,\n        isCapitalized: false,\n        isTable: false,\n        blockType: \"paragraph\",\n      };\n\n      if ($isRangeSelection(selection)) {\n        const anchorNode = selection.anchor.getNode();\n        const element =\n          anchorNode.getKey() === \"root\"\n            ? anchorNode\n            : anchorNode.getTopLevelElementOrThrow();\n\n        let blockType = \"paragraph\";\n        if ($isListNode(element)) {\n          const parentList = $getNearestNodeOfType(anchorNode, ListNode);\n          blockType = parentList\n            ? parentList.getListType()\n            : element.getListType();\n        } else {\n          if ($isHeadingNode(element)) {\n            blockType = element.getTag();\n          } else if ($isQuoteNode(element)) {\n            blockType = \"quote\";\n          } else if ($isCodeNode(element)) {\n            blockType = \"code\";\n          }\n        }\n        newToolbarState.blockType = blockType;\n\n        const cell = $findMatchingParent(anchorNode, (node) =>\n          $isTableCellNode(node)\n        );\n        newToolbarState.isTable = cell !== null;\n\n        let isLink = false;\n        let node: ElementNode | TextNode | null = anchorNode;\n        while (node) {\n          if ($isLinkNode(node)) {\n            isLink = true;\n            break;\n          }\n          const parent: ElementNode | null = node.getParent();\n          if (parent === node) break;\n          node = parent;\n        }\n        newToolbarState.isLink = isLink;\n\n        newToolbarState.isBulletedList = blockType === \"bullet\";\n        newToolbarState.isNumberedList = blockType === \"number\";\n        newToolbarState.isCheckList = blockType === \"check\";\n        newToolbarState.isQuote = blockType === \"quote\";\n        newToolbarState.isCodeBlock = blockType === \"code\";\n\n        newToolbarState.isBold = selection.hasFormat(\"bold\");\n        newToolbarState.isItalic = selection.hasFormat(\"italic\");\n        newToolbarState.isUnderline = selection.hasFormat(\"underline\");\n        newToolbarState.isStrikethrough = selection.hasFormat(\"strikethrough\");\n        newToolbarState.isCode = selection.hasFormat(\"code\");\n        newToolbarState.isHighlight = selection.hasFormat(\"highlight\");\n        newToolbarState.isSubscript = selection.hasFormat(\"subscript\");\n        newToolbarState.isSuperscript = selection.hasFormat(\"superscript\");\n        newToolbarState.isCapitalized = selection.hasFormat(\"capitalize\");\n      }\n\n      dispatch({ type: \"UPDATE\", payload: newToolbarState });\n    });\n  }, [editor]);\n\n  useEffect(() => {\n    return mergeRegister(\n      editor.registerUpdateListener(updateToolbar),\n      editor.registerCommand(\n        SELECTION_CHANGE_COMMAND,\n        () => {\n          updateToolbar();\n          return false;\n        },\n        COMMAND_PRIORITY_CRITICAL\n      )\n    );\n  }, [editor, updateToolbar]);\n\n  useEffect(() => {\n    return editor.registerCommand(\n      CAN_UNDO_COMMAND,\n      (payload: boolean) => {\n        dispatch({ type: \"SET_CAN_UNDO\", payload });\n        return false;\n      },\n      COMMAND_PRIORITY_CRITICAL\n    );\n  }, [editor]);\n\n  useEffect(() => {\n    return editor.registerCommand(\n      CAN_REDO_COMMAND,\n      (payload: boolean) => {\n        dispatch({ type: \"SET_CAN_REDO\", payload });\n        return false;\n      },\n      COMMAND_PRIORITY_CRITICAL\n    );\n  }, [editor]);\n\n  const insertLink = () => {\n    if (!toolbarState.isLink) {\n      setShowLinkDialog(true);\n    } else {\n      editor.dispatchCommand(TOGGLE_LINK_COMMAND, null);\n    }\n  };\n\n  const handleLinkSubmit = (url: string) => {\n    if (url) {\n      editor.dispatchCommand(TOGGLE_LINK_COMMAND, url);\n    }\n  };\n\n  const handleTableSubmit = (rows: number, columns: number) => {\n    editor.dispatchCommand(INSERT_TABLE_COMMAND, {\n      columns: columns.toString(),\n      rows: rows.toString(),\n    });\n  };\n\n  const handleImageSubmit = (src: string, alt: string) => {\n    editor.update(() => {\n      const selection = $getSelection();\n      if ($isRangeSelection(selection)) {\n        const imageNode = $createImageNode(src, alt);\n        selection.insertNodes([imageNode]);\n      }\n    });\n  };\n\n  return (\n    <div className=\"flex items-center gap-1 p-3 border-b bg-gradient-to-r from-background via-background to-accent/5 backdrop-blur-sm flex-wrap\">\n      <HistoryButtons\n        canUndo={toolbarState.canUndo}\n        canRedo={toolbarState.canRedo}\n      />\n\n      <Separator />\n      <BlockFormatDropDown blockType={toolbarState.blockType} />\n\n      <Separator />\n\n      <ListButtons toolbarState={toolbarState} />\n      <BlockTypeButtons toolbarState={toolbarState} />\n\n      <Separator />\n\n      <TextFormatButtons toolbarState={toolbarState} />\n      <ColorPicker editor={editor} />\n\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <div>\n            <Button\n              variant={toolbarState.isHighlight ? \"secondary\" : \"ghost\"}\n              size=\"sm\"\n              title=\"Highlight\"\n              className=\"hover:bg-accent/80 transition-all duration-200\"\n            >\n              <Highlighter className=\"size-4\" />\n            </Button>\n          </div>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent className=\"animate-in slide-in-from-top-2 duration-200\">\n          {HIGHLIGHT_COLORS.map((color) => (\n            <DropdownMenuItem\n              key={color.value}\n              onClick={() => {\n                editor.update(() => {\n                  const selection = $getSelection();\n                  if ($isRangeSelection(selection)) {\n                    $patchStyleText(selection, {\n                      \"background-color\": color.value,\n                    });\n                  }\n                });\n              }}\n              className=\"hover:bg-accent/80 transition-colors\"\n            >\n              <div\n                className=\"size-4 rounded-sm mr-2 border shadow-sm\"\n                style={{ backgroundColor: color.value }}\n              />\n              {color.name}\n            </DropdownMenuItem>\n          ))}\n          <DropdownMenuSeparator />\n          <DropdownMenuItem\n            onClick={() => {\n              editor.update(() => {\n                const selection = $getSelection();\n                if ($isRangeSelection(selection)) {\n                  $patchStyleText(selection, { \"background-color\": \"\" });\n                }\n              });\n            }}\n            className=\"hover:bg-accent/80 transition-colors\"\n          >\n            Remove Highlight\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n      <Separator />\n      <div>\n        <Button\n          variant={toolbarState.isLink ? \"secondary\" : \"ghost\"}\n          size=\"sm\"\n          onClick={insertLink}\n          title=\"Insert Link\"\n          className=\"hover:bg-accent/80 transition-all duration-200\"\n        >\n          <LinkIcon className=\"size-4\" />\n        </Button>\n      </div>\n\n      <Separator />\n\n      <InsertDropDown\n        setShowTableDialog={setShowTableDialog}\n        setShowImageDialog={setShowImageDialog}\n      />\n\n      {toolbarState.isTable && (\n        <>\n          <Separator />\n          <TableButtons />\n        </>\n      )}\n\n      <Separator />\n\n      <AlignButtons />\n\n      <LinkDialog\n        isOpen={showLinkDialog}\n        onClose={() => setShowLinkDialog(false)}\n        onSubmit={handleLinkSubmit}\n      />\n\n      <TableDialog\n        isOpen={showTableDialog}\n        onClose={() => setShowTableDialog(false)}\n        onSubmit={handleTableSubmit}\n      />\n\n      <ImageDialog\n        isOpen={showImageDialog}\n        onClose={() => setShowImageDialog(false)}\n        onSubmit={handleImageSubmit}\n      />\n\n      <Separator />\n\n      <FileActions />\n      <div className=\"ml-auto\">\n        <ModeToggle />\n        <Button size={\"sm\"} variant={\"ghost\"}>\n          <a target=\"_blank\" href=\"https://github.com/nkurunziza-saddy/lexi\">\n            <Github className=\"size-4\" />\n          </a>\n        </Button>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/new-york/blocks/editor/plugins/toolbar/toolbar-items.ts",
      "content": "import {\n  Bold,\n  Italic,\n  Underline,\n  Strikethrough,\n  Code,\n  Subscript,\n  Superscript,\n  CaseUpper,\n  List,\n  ListOrdered,\n  ListChecks,\n  Quote,\n  CodeSquare,\n} from \"lucide-react\";\nimport {\n  INSERT_UNORDERED_LIST_COMMAND,\n  INSERT_ORDERED_LIST_COMMAND,\n  INSERT_CHECK_LIST_COMMAND,\n} from \"@lexical/list\";\nimport { FORMAT_TEXT_COMMAND } from \"lexical\";\n\nexport const TEXT_FORMAT_ITEMS = [\n  { name: \"bold\", icon: Bold, command: FORMAT_TEXT_COMMAND, payload: \"bold\" },\n  {\n    name: \"italic\",\n    icon: Italic,\n    command: FORMAT_TEXT_COMMAND,\n    payload: \"italic\",\n  },\n  {\n    name: \"underline\",\n    icon: Underline,\n    command: FORMAT_TEXT_COMMAND,\n    payload: \"underline\",\n  },\n  {\n    name: \"strikethrough\",\n    icon: Strikethrough,\n    command: FORMAT_TEXT_COMMAND,\n    payload: \"strikethrough\",\n  },\n  { name: \"code\", icon: Code, command: FORMAT_TEXT_COMMAND, payload: \"code\" },\n  {\n    name: \"subscript\",\n    icon: Subscript,\n    command: FORMAT_TEXT_COMMAND,\n    payload: \"subscript\",\n  },\n  {\n    name: \"superscript\",\n    icon: Superscript,\n    command: FORMAT_TEXT_COMMAND,\n    payload: \"superscript\",\n  },\n  {\n    name: \"capitalize\",\n    icon: CaseUpper,\n    command: FORMAT_TEXT_COMMAND,\n    payload: \"capitalize\",\n  },\n];\n\nexport const BLOCK_FORMAT_ITEMS = [\n  { name: \"bullet\", icon: List, command: INSERT_UNORDERED_LIST_COMMAND },\n  { name: \"number\", icon: ListOrdered, command: INSERT_ORDERED_LIST_COMMAND },\n  { name: \"check\", icon: ListChecks, command: INSERT_CHECK_LIST_COMMAND },\n  { name: \"quote\", icon: Quote, format: \"quote\" },\n  { name: \"code\", icon: CodeSquare, format: \"code\" },\n];\n",
      "type": "registry:lib"
    },
    {
      "path": "src/registry/new-york/blocks/editor/plugins/toolbar/extensions/align-buttons.tsx",
      "content": "import { useLexicalComposerContext } from \"@lexical/react/LexicalComposerContext\";\n\nimport { FORMAT_ELEMENT_COMMAND } from \"lexical\";\nimport { AlignLeft, AlignCenter, AlignRight, AlignJustify } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\nexport function AlignButtons() {\n  const [editor] = useLexicalComposerContext();\n\n  const formatElement = (format: \"left\" | \"center\" | \"right\" | \"justify\") => {\n    editor.dispatchCommand(FORMAT_ELEMENT_COMMAND, format);\n  };\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <div>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            title=\"Text Alignment\"\n            className=\"hover:bg-accent/80 transition-colors\"\n          >\n            <AlignLeft className=\"size-4\" />\n          </Button>\n        </div>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent\n        align=\"start\"\n        className=\"animate-in slide-in-from-top-2 duration-200\"\n      >\n        <DropdownMenuItem\n          onClick={() => formatElement(\"left\")}\n          className=\"hover:bg-accent/80 transition-colors\"\n        >\n          <AlignLeft className=\"mr-2 size-4\" />\n          Left\n        </DropdownMenuItem>\n        <DropdownMenuItem\n          onClick={() => formatElement(\"center\")}\n          className=\"hover:bg-accent/80 transition-colors\"\n        >\n          <AlignCenter className=\"mr-2 size-4\" />\n          Center\n        </DropdownMenuItem>\n        <DropdownMenuItem\n          onClick={() => formatElement(\"right\")}\n          className=\"hover:bg-accent/80 transition-colors\"\n        >\n          <AlignRight className=\"mr-2 size-4\" />\n          Right\n        </DropdownMenuItem>\n        <DropdownMenuItem\n          onClick={() => formatElement(\"justify\")}\n          className=\"hover:bg-accent/80 transition-colors\"\n        >\n          <AlignJustify className=\"mr-2 size-4\" />\n          Justify\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/new-york/blocks/editor/plugins/toolbar/extensions/block-format-dropdown.tsx",
      "content": "import { useLexicalComposerContext } from \"@lexical/react/LexicalComposerContext\";\nimport { $createHeadingNode } from \"@lexical/rich-text\";\nimport { $setBlocksType } from \"@lexical/selection\";\nimport {\n  $createParagraphNode,\n  $getSelection,\n  $isRangeSelection,\n} from \"lexical\";\nimport {\n  Heading,\n  Heading1,\n  Heading2,\n  Heading3,\n  Heading4,\n  Check,\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\nexport function BlockFormatDropDown({ blockType }: { blockType: string }) {\n  const [editor] = useLexicalComposerContext();\n\n  const formatHeading = (headingSize: \"h1\" | \"h2\" | \"h3\" | \"h4\") => {\n    if (blockType !== headingSize) {\n      editor.update(() => {\n        const selection = $getSelection();\n        if ($isRangeSelection(selection)) {\n          $setBlocksType(selection, () => $createHeadingNode(headingSize));\n        }\n      });\n    }\n  };\n\n  const formatParagraph = () => {\n    if (blockType !== \"paragraph\") {\n      editor.update(() => {\n        const selection = $getSelection();\n        if ($isRangeSelection(selection)) {\n          $setBlocksType(selection, () => $createParagraphNode());\n        }\n      });\n    }\n  };\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild className=\"lowercase\">\n        <Button\n          variant={\n            [\"h1\", \"h2\", \"h3\"].includes(blockType) ? \"secondary\" : \"ghost\"\n          }\n          size={\"sm\"}\n        >\n          {blockType === \"paragraph\" ? (\n            <Heading className=\"size-4\" />\n          ) : blockType === \"h1\" ? (\n            <Heading1 className=\"size-4\" />\n          ) : blockType === \"h2\" ? (\n            <Heading2 className=\"size-4\" />\n          ) : blockType === \"h3\" ? (\n            <Heading3 className=\"size-4\" />\n          ) : blockType === \"h4\" ? (\n            <Heading4 className=\"size-4\" />\n          ) : (\n            <Heading className=\"size-4\" />\n          )}\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"start\">\n        {[\n          {\n            key: \"heading 1\",\n            icon: Heading1,\n            format: \"h1\",\n            state: blockType === \"h1\",\n            onClick: () => formatHeading(\"h1\"),\n          },\n          {\n            key: \"heading 2\",\n            icon: Heading2,\n            format: \"h2\",\n            state: blockType === \"h2\",\n            onClick: () => formatHeading(\"h2\"),\n          },\n          {\n            key: \"heading 3\",\n            icon: Heading3,\n            format: \"h3\",\n            state: blockType === \"h3\",\n            onClick: () => formatHeading(\"h3\"),\n          },\n          {\n            key: \"heading 4\",\n            icon: Heading4,\n            format: \"h4\",\n            state: blockType === \"h4\",\n            onClick: () => formatHeading(\"h4\"),\n          },\n          {\n            key: \"paragraph\",\n            icon: Heading,\n            format: \"p\",\n            state: blockType === \"paragraph\",\n            onClick: formatParagraph,\n          },\n        ].map(({ key, icon: Icon, state, onClick }) => (\n          <DropdownMenuItem\n            key={key}\n            className={\"flex items-center justify-between gap-5\"}\n            onSelect={onClick}\n          >\n            <div className=\"flex items-center\">\n              <Icon className=\"size-4\" />{\" \"}\n              <span className=\"ml-2 capitalize text-sm text-muted-foreground\">\n                {key}\n              </span>\n            </div>\n            {state ? <Check className=\"ml-auto size-3.5\" /> : null}\n          </DropdownMenuItem>\n        ))}\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/new-york/blocks/editor/plugins/toolbar/extensions/block-type-buttons.tsx",
      "content": "import { useLexicalComposerContext } from \"@lexical/react/LexicalComposerContext\";\nimport { $createCodeNode } from \"@lexical/code\";\nimport { $createQuoteNode } from \"@lexical/rich-text\";\nimport { $setBlocksType } from \"@lexical/selection\";\nimport {\n  $createParagraphNode,\n  $getSelection,\n  $isRangeSelection,\n} from \"lexical\";\nimport { BLOCK_FORMAT_ITEMS } from \"../toolbar-items\";\nimport { ToolbarButton } from \"./toolbar-button\";\nimport { ToolbarState } from \"..\";\n\nconst BLOCK_TYPE_ITEMS = BLOCK_FORMAT_ITEMS.filter((item) => item.format);\n\nexport function BlockTypeButtons({\n  toolbarState,\n}: {\n  toolbarState: ToolbarState;\n}) {\n  const [editor] = useLexicalComposerContext();\n\n  const onClickHandler = (format: string) => {\n    editor.update(() => {\n      const selection = $getSelection();\n      if ($isRangeSelection(selection)) {\n        if (toolbarState.blockType === format) {\n          $setBlocksType(selection, () => $createParagraphNode());\n        } else {\n          if (format === \"quote\") {\n            $setBlocksType(selection, () => $createQuoteNode());\n          } else if (format === \"code\") {\n            $setBlocksType(selection, () => $createCodeNode());\n          }\n        }\n      }\n    });\n  };\n\n  return (\n    <>\n      {BLOCK_TYPE_ITEMS.map((item) => {\n        return (\n          <ToolbarButton\n            key={item.name}\n            onClick={() => onClickHandler(item.format!)}\n            isActive={toolbarState.blockType === item.name}\n            icon={item.icon}\n            title={item.name}\n          />\n        );\n      })}\n    </>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/new-york/blocks/editor/plugins/toolbar/extensions/color-picker.tsx",
      "content": "import { useState, useCallback, useEffect } from \"react\";\nimport {\n  $getSelection,\n  $isRangeSelection,\n  SELECTION_CHANGE_COMMAND,\n  COMMAND_PRIORITY_CRITICAL,\n  type LexicalEditor,\n} from \"lexical\";\nimport {\n  $getSelectionStyleValueForProperty,\n  $patchStyleText,\n} from \"@lexical/selection\";\nimport { Palette } from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { FONT_COLORS } from \"../../../lib/colors\";\n\nexport function ColorPicker({\n  editor,\n  disabled = false,\n}: {\n  editor: LexicalEditor;\n  disabled?: boolean;\n}) {\n  const [color, setColor] = useState(\"hsl(var(--foreground))\");\n\n  const applyColor = useCallback(\n    (newColor: string) => {\n      editor.update(() => {\n        const selection = $getSelection();\n        if ($isRangeSelection(selection)) {\n          $patchStyleText(selection, { color: newColor });\n        }\n      });\n    },\n    [editor]\n  );\n\n  useEffect(() => {\n    return editor.registerCommand(\n      SELECTION_CHANGE_COMMAND,\n      () => {\n        editor.read(() => {\n          const selection = $getSelection();\n          if ($isRangeSelection(selection)) {\n            setColor(\n              $getSelectionStyleValueForProperty(\n                selection,\n                \"color\",\n                \"hsl(var(--foreground))\"\n              )\n            );\n          }\n        });\n        return false;\n      },\n      COMMAND_PRIORITY_CRITICAL\n    );\n  }, [editor]);\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"ghost\" size=\"sm\" disabled={disabled} className=\"\">\n          <Palette className=\"size-4\" style={{ color }} />\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent className=\"animate-in grid grid-cols-3 gap-1 slide-in-from-top-2 duration-200\">\n        {FONT_COLORS.map((c) => (\n          <DropdownMenuItem\n            key={c.name}\n            className=\"\"\n            onClick={() => applyColor(c.value)}\n          >\n            <div\n              className=\"size-4 rounded-sm border border-input/20 shadow-sm\"\n              style={{ backgroundColor: c.value }}\n            />\n            {c.name}\n          </DropdownMenuItem>\n        ))}\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/new-york/blocks/editor/plugins/toolbar/extensions/file-actions.tsx",
      "content": "import { useRef } from \"react\";\nimport { useLexicalComposerContext } from \"@lexical/react/LexicalComposerContext\";\n\nimport { FileDown, FileUp } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  exportAsHTML,\n  exportAsMarkdown,\n  copyAsPlainText,\n  importMarkdown,\n} from \"../../../lib/utils\";\n\nexport function FileActions() {\n  const [editor] = useLexicalComposerContext();\n  const importInputRef = useRef<HTMLInputElement>(null);\n\n  const handleImport = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      importMarkdown(editor, file);\n    }\n  };\n\n  return (\n    <>\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <div>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              title=\"Export\"\n              className=\"hover:bg-accent/80 transition-colors\"\n            >\n              <FileDown className=\"size-4\" />\n            </Button>\n          </div>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent\n          align=\"start\"\n          className=\"animate-in slide-in-from-top-2 duration-200\"\n        >\n          <DropdownMenuItem\n            onClick={() => exportAsHTML(editor)}\n            className=\"hover:bg-accent/80 transition-colors\"\n          >\n            Save as HTML\n          </DropdownMenuItem>\n          <DropdownMenuItem\n            onClick={() => exportAsMarkdown(editor)}\n            className=\"hover:bg-accent/80 transition-colors\"\n          >\n            Save as Markdown\n          </DropdownMenuItem>\n          <DropdownMenuItem\n            onClick={() => copyAsPlainText(editor)}\n            className=\"hover:bg-accent/80 transition-colors\"\n          >\n            Copy as Plain Text\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n\n      <input\n        type=\"file\"\n        accept=\".md,.markdown\"\n        ref={importInputRef}\n        onChange={handleImport}\n        className=\"hidden\"\n      />\n      <Button\n        variant=\"ghost\"\n        size=\"sm\"\n        title=\"Import\"\n        onClick={() => importInputRef.current?.click()}\n        className=\"hover:bg-accent/80 transition-colors\"\n      >\n        <FileUp className=\"size-4\" />\n      </Button>\n    </>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/new-york/blocks/editor/plugins/toolbar/extensions/history-buttons.tsx",
      "content": "import { useLexicalComposerContext } from \"@lexical/react/LexicalComposerContext\";\n\nimport { UNDO_COMMAND, REDO_COMMAND } from \"lexical\";\nimport { Undo, Redo } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport function HistoryButtons({\n  canUndo,\n  canRedo,\n}: {\n  canUndo: boolean;\n  canRedo: boolean;\n}) {\n  const [editor] = useLexicalComposerContext();\n\n  return (\n    <>\n      <div>\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          disabled={!canUndo}\n          onClick={() => editor.dispatchCommand(UNDO_COMMAND, undefined)}\n          title=\"Undo\"\n          className=\"hover:bg-accent/80 transition-all duration-200\"\n        >\n          <Undo className=\"size-4\" />\n        </Button>\n      </div>\n      <div>\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          disabled={!canRedo}\n          onClick={() => editor.dispatchCommand(REDO_COMMAND, undefined)}\n          title=\"Redo\"\n          className=\"hover:bg-accent/80 transition-all duration-200\"\n        >\n          <Redo className=\"size-4\" />\n        </Button>\n      </div>\n    </>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/new-york/blocks/editor/plugins/toolbar/extensions/insert-actions.tsx",
      "content": "import { useLexicalComposerContext } from \"@lexical/react/LexicalComposerContext\";\n\nimport { INSERT_HORIZONTAL_RULE_COMMAND } from \"@lexical/react/LexicalHorizontalRuleNode\";\nimport { Minus, Plus, Table, ImageIcon } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\nexport function InsertDropDown({\n  setShowTableDialog,\n  setShowImageDialog,\n}: {\n  setShowTableDialog: (show: boolean) => void;\n  setShowImageDialog: (show: boolean) => void;\n}) {\n  const [editor] = useLexicalComposerContext();\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <div>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            title=\"Insert\"\n            className=\"hover:bg-accent/80 transition-colors\"\n          >\n            <Plus className=\"size-4\" />\n          </Button>\n        </div>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent\n        align=\"start\"\n        className=\"animate-in slide-in-from-top-2 duration-200\"\n      >\n        <DropdownMenuItem\n          onClick={() =>\n            editor.dispatchCommand(INSERT_HORIZONTAL_RULE_COMMAND, undefined)\n          }\n          className=\"hover:bg-accent/80 transition-colors\"\n        >\n          <Minus className=\"mr-2 size-4\" />\n          Divider\n        </DropdownMenuItem>\n        <DropdownMenuItem\n          onClick={() => setShowTableDialog(true)}\n          className=\"hover:bg-accent/80 transition-colors\"\n        >\n          <Table className=\"mr-2 size-4\" />\n          Table\n        </DropdownMenuItem>\n        <DropdownMenuItem\n          onClick={() => setShowImageDialog(true)}\n          className=\"hover:bg-accent/80 transition-colors\"\n        >\n          <ImageIcon className=\"mr-2 size-4\" />\n          Image\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/new-york/blocks/editor/plugins/toolbar/extensions/list-buttons.tsx",
      "content": "import { useLexicalComposerContext } from \"@lexical/react/LexicalComposerContext\";\nimport { BLOCK_FORMAT_ITEMS } from \"../toolbar-items\";\nimport { ToolbarButton } from \"./toolbar-button\";\nimport { ToolbarState } from \"..\";\n\nconst LIST_ITEMS = BLOCK_FORMAT_ITEMS.filter(\n  (item) => item.command && [\"bullet\", \"number\", \"check\"].includes(item.name)\n);\n\nexport function ListButtons({ toolbarState }: { toolbarState: ToolbarState }) {\n  const [editor] = useLexicalComposerContext();\n\n  return (\n    <>\n      {LIST_ITEMS.map((item) => {\n        return (\n          <ToolbarButton\n            key={item.name}\n            onClick={() => editor.dispatchCommand(item.command!, undefined)}\n            isActive={toolbarState.blockType === item.name}\n            icon={item.icon}\n            title={item.name}\n          />\n        );\n      })}\n    </>\n  );\n}",
      "type": "registry:component"
    },
    {
      "path": "src/registry/new-york/blocks/editor/plugins/toolbar/extensions/table-buttons.tsx",
      "content": "import { useLexicalComposerContext } from \"@lexical/react/LexicalComposerContext\";\n\nimport {\n  $insertTableRowAtSelection,\n  $insertTableColumnAtSelection,\n} from \"@lexical/table\";\nimport { Rows, Columns } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport function TableButtons() {\n  const [editor] = useLexicalComposerContext();\n\n  const insertRow = () => {\n    editor.update(() => {\n      $insertTableRowAtSelection(true);\n    });\n  };\n\n  const insertColumn = () => {\n    editor.update(() => {\n      $insertTableColumnAtSelection(true);\n    });\n  };\n\n  return (\n    <>\n      <div>\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={insertRow}\n          title=\"Insert Row Below\"\n        >\n          <Rows className=\"size-4\" />\n        </Button>\n      </div>\n      <div>\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={insertColumn}\n          title=\"Insert Column Right\"\n        >\n          <Columns className=\"size-4\" />\n        </Button>\n      </div>\n    </>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/new-york/blocks/editor/plugins/toolbar/extensions/text-format-buttons.tsx",
      "content": "import { useLexicalComposerContext } from \"@lexical/react/LexicalComposerContext\";\nimport { TEXT_FORMAT_ITEMS } from \"../toolbar-items\";\nimport { ToolbarButton } from \"./toolbar-button\";\nimport { ToolbarState } from \"..\";\nimport { LexicalCommand } from \"lexical\";\n\nexport function TextFormatButtons({\n  toolbarState,\n}: {\n  toolbarState: ToolbarState;\n}) {\n  const [editor] = useLexicalComposerContext();\n\n  const handleClick = (command: LexicalCommand<string>, payload?: string) => {\n    if (!payload) return;\n    editor.dispatchCommand(command, payload);\n  };\n\n  return (\n    <>\n      {TEXT_FORMAT_ITEMS.map((item) => (\n        <ToolbarButton\n          key={item.name}\n          onClick={() => handleClick(item.command, item.payload)}\n          isActive={\n            !!toolbarState[\n              `is${\n                item.name.charAt(0).toUpperCase() + item.name.slice(1)\n              }` as keyof ToolbarState\n            ]\n          }\n          icon={item.icon}\n          title={item.name}\n        />\n      ))}\n    </>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/registry/new-york/blocks/editor/plugins/toolbar/extensions/toolbar-button.tsx",
      "content": "import { Button } from \"@/components/ui/button\";\nimport type { LucideIcon } from \"lucide-react\";\n\ninterface Props {\n  onClick: () => void;\n  isActive: boolean;\n  icon: LucideIcon;\n  title: string;\n}\n\nexport function ToolbarButton({ onClick, isActive, icon: Icon, title }: Props) {\n  return (\n    <div>\n      <Button\n        variant={isActive ? \"secondary\" : \"ghost\"}\n        size=\"sm\"\n        onClick={onClick}\n        title={title}\n        className=\"hover:bg-accent/80 transition-all duration-200\"\n      >\n        <Icon className=\"size-4\" />\n      </Button>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    }
  ],
  "cssVars": {
    "theme": {
      "color-editor-background": "var(--editor-background)",
      "color-editor-foreground": "var(--editor-foreground)",
      "color-editor-primary": "var(--editor-primary)",
      "color-editor-primary-foreground": "var(--editor-primary-foreground)",
      "color-editor-accent": "var(--editor-accent)",
      "color-editor-accent-foreground": "var(--editor-accent-foreground)",
      "color-editor-popover": "var(--editor-popover)",
      "color-editor-popover-foreground": "var(--editor-popover-foreground)",
      "color-editor-border": "var(--editor-border)",
      "color-editor-input": "var(--editor-input)",
      "color-editor-ring": "var(--editor-ring)",
      "color-editor-muted": "var(--editor-muted)",
      "color-editor-muted-foreground": "var(--editor-muted-foreground)",
      "color-editor-card": "var(--editor-card)",
      "color-editor-card-foreground": "var(--editor-card-foreground)"
    },
    "light": {
      "editor-background": "oklch(1 0 0)",
      "editor-foreground": "oklch(0.145 0 0)",
      "editor-card": "oklch(1 0 0)",
      "editor-card-foreground": "oklch(0.145 0 0)",
      "editor-popover": "oklch(1 0 0)",
      "editor-popover-foreground": "oklch(0.145 0 0)",
      "editor-primary": "oklch(0.205 0 0)",
      "editor-primary-foreground": "oklch(0.985 0 0)",
      "editor-muted": "oklch(0.97 0 0)",
      "editor-muted-foreground": "oklch(0.556 0 0)",
      "editor-accent": "oklch(0.97 0 0)",
      "editor-accent-foreground": "oklch(0.205 0 0)",
      "editor-border": "oklch(0.922 0 0)",
      "editor-input": "oklch(0.922 0 0)",
      "editor-ring": "oklch(0.708 0 0)"
    },
    "dark": {
      "editor-background": "oklch(0.145 0 0)",
      "editor-foreground": "oklch(0.985 0 0)",
      "editor-card": "oklch(0.205 0 0)",
      "editor-card-foreground": "oklch(0.985 0 0)",
      "editor-popover": "oklch(0.205 0 0)",
      "editor-popover-foreground": "oklch(0.985 0 0)",
      "editor-primary": "oklch(0.922 0 0)",
      "editor-primary-foreground": "oklch(0.205 0 0)",
      "editor-muted": "oklch(0.269 0 0)",
      "editor-muted-foreground": "oklch(0.708 0 0)",
      "editor-accent": "oklch(0.269 0 0)",
      "editor-accent-foreground": "oklch(0.985 0 0)",
      "editor-border": "oklch(1 0 0 / 10%)",
      "editor-input": "oklch(1 0 0 / 15%)",
      "editor-ring": "oklch(0.556 0 0)"
    }
  }
}