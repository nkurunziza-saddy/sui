{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "products-table",
  "type": "registry:block",
  "title": "Products Table",
  "description": "A data table with sorting, filtering, pagination, and column visibility controls.",
  "dependencies": [
    "@tanstack/react-table"
  ],
  "registryDependencies": [
    "button",
    "table",
    "select",
    "input",
    "dropdown-menu",
    "badge",
    "command",
    "popover",
    "separator"
  ],
  "files": [
    {
      "path": "src/registry/new-york/blocks/extensive-table/index.tsx",
      "content": "import { exampleProducts, productColumns } from \"./column\";\nimport { DataTable } from \"./data-table\";\n\nexport const ProductsTable = () => {\n  return <DataTable columns={productColumns} data={exampleProducts} />;\n};\n",
      "type": "registry:component",
      "target": "components/products-table/index.tsx"
    },
    {
      "path": "src/registry/new-york/blocks/extensive-table/column.tsx",
      "content": "\"use client\";\n\nimport type { ColumnDef } from \"@tanstack/react-table\";\nimport { Accessibility, Book, SwitchCamera, Tv } from \"lucide-react\";\n\n// --- Example Type ---\ntype Product = {\n  id: string;\n  name: string;\n  price: number;\n  category: string;\n  createdAt: string;\n};\n\n// --- Example Columns ---\nexport const productColumns: ColumnDef<Product>[] = [\n  {\n    accessorKey: \"name\",\n    header: \"Product Name\",\n  },\n  {\n    accessorKey: \"price\",\n    header: \"Price\",\n    cell: ({ row }) => `$${row.original.price.toFixed(2)}`,\n  },\n  {\n    accessorKey: \"category\",\n    header: \"Category\",\n  },\n  {\n    accessorKey: \"createdAt\",\n    header: \"Created At\",\n    cell: ({ row }) => {\n      const date = new Date(row.original.createdAt);\n      return date.toLocaleDateString(\"en-US\", {\n        month: \"short\",\n        day: \"2-digit\",\n        year: \"numeric\",\n      });\n    },\n  },\n];\n\n// --- Example Data ---\nexport const exampleProducts: Product[] = [\n  {\n    id: \"1\",\n    name: \"Laptop\",\n    price: 1200,\n    category: \"Electronics\",\n    createdAt: \"2024-06-01\",\n  },\n  {\n    id: \"2\",\n    name: \"T-Shirt\",\n    price: 25,\n    category: \"Clothing\",\n    createdAt: \"2024-06-05\",\n  },\n  {\n    id: \"3\",\n    name: \"Water Bottle\",\n    price: 15.5,\n    category: \"Accessories\",\n    createdAt: \"2024-06-10\",\n  },\n  {\n    id: \"4\",\n    name: \"Book\",\n    price: 12.99,\n    category: \"Books\",\n    createdAt: \"2024-06-15\",\n  },\n];\n\n// --- Example Data ---\n\nexport const productCategories = [\n  {\n    label: \"Books\",\n    value: \"Books\",\n    icon: Book,\n  },\n  {\n    label: \"Accessories\",\n    value: \"Accessories\",\n    icon: Accessibility,\n  },\n  {\n    label: \"Clothing\",\n    value: \"Clothing\",\n    icon: SwitchCamera,\n  },\n  {\n    label: \"Electronics\",\n    value: \"Electronics\",\n    icon: Tv,\n  },\n];\n",
      "type": "registry:component",
      "target": "components/products-table/column.tsx"
    },
    {
      "path": "src/registry/new-york/blocks/extensive-table/data-table.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport {\n  ColumnDef,\n  ColumnFiltersState,\n  flexRender,\n  getCoreRowModel,\n  getFacetedRowModel,\n  getFacetedUniqueValues,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  SortingState,\n  useReactTable,\n  VisibilityState,\n} from \"@tanstack/react-table\";\n\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\n\nimport { DataTablePagination } from \"./pagination\";\nimport { DefaultDataTableToolbar } from \"./toolbar\";\n\ninterface DataTableProps<TData, TValue> {\n  columns: ColumnDef<TData, TValue>[];\n  data: TData[];\n}\n\nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n}: DataTableProps<TData, TValue>) {\n  const [rowSelection, setRowSelection] = React.useState({});\n  const [columnVisibility, setColumnVisibility] =\n    React.useState<VisibilityState>({});\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(\n    []\n  );\n  const [sorting, setSorting] = React.useState<SortingState>([]);\n\n  const table = useReactTable({\n    data,\n    columns,\n    state: {\n      sorting,\n      columnVisibility,\n      rowSelection,\n      columnFilters,\n    },\n    initialState: {\n      pagination: {\n        pageSize: 25,\n      },\n    },\n    enableRowSelection: true,\n    onRowSelectionChange: setRowSelection,\n    onSortingChange: setSorting,\n    onColumnFiltersChange: setColumnFilters,\n    onColumnVisibilityChange: setColumnVisibility,\n    getCoreRowModel: getCoreRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getFacetedRowModel: getFacetedRowModel(),\n    getFacetedUniqueValues: getFacetedUniqueValues(),\n  });\n\n  return (\n    <div className=\"flex flex-col gap-4 overflow-x-auto rounded-lg\">\n      <DefaultDataTableToolbar table={table} />\n      <div className=\"\">\n        <Table className=\"min-w-full border-separate border-spacing-0\">\n          <TableHeader className=\"bg-muted/50 sticky top-0 z-10 backdrop-blur-xs\">\n            {table.getHeaderGroups().map((headerGroup) => (\n              <TableRow key={headerGroup.id} className=\"bg-transparent\">\n                {headerGroup.headers.map((header) => {\n                  return (\n                    <TableHead\n                      key={header.id}\n                      colSpan={header.colSpan}\n                      className=\"bg-muted/50 border-b border-border text-foreground font-semibold text-sm\"\n                    >\n                      {header.isPlaceholder\n                        ? null\n                        : flexRender(\n                            header.column.columnDef.header,\n                            header.getContext()\n                          )}\n                    </TableHead>\n                  );\n                })}\n              </TableRow>\n            ))}\n          </TableHeader>\n          <tbody aria-hidden=\"true\" className=\"table-row h-2\"></tbody>\n          <TableBody>\n            {table.getRowModel().rows?.length ? (\n              table.getRowModel().rows.map((row, idx) => (\n                <React.Fragment key={row.id}>\n                  <TableRow\n                    data-state={row.getIsSelected() && \"selected\"}\n                    className={`transition-colors ${\n                      row.getIsExpanded()\n                        ? \"bg-muted/60 border-l-4 border-muted\"\n                        : idx % 2 === 0\n                        ? \"bg-background\"\n                        : \"bg-muted/40\"\n                    } hover:bg-muted/60 border-b border-border`}\n                  >\n                    {row.getVisibleCells().map((cell) => (\n                      <TableCell\n                        key={cell.id}\n                        className=\"whitespace-nowrap [&:has([aria-expanded])]:w-px [&:has([aria-expanded])]:py-0 [&:has([aria-expanded])]:pr-0 px-3 py-2 text-sm text-foreground\"\n                      >\n                        {flexRender(\n                          cell.column.columnDef.cell,\n                          cell.getContext()\n                        )}\n                      </TableCell>\n                    ))}\n                  </TableRow>\n                </React.Fragment>\n              ))\n            ) : (\n              <TableRow>\n                <TableCell\n                  colSpan={columns.length}\n                  className=\"h-24 text-center text-muted-foreground\"\n                >\n                  No results found\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </div>\n      <DataTablePagination table={table} />\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/products-table/data-table.tsx"
    },
    {
      "path": "src/registry/new-york/blocks/extensive-table/faceted-filter.tsx",
      "content": "import * as React from \"react\";\nimport { Column } from \"@tanstack/react-table\";\nimport { Check, PlusCircle } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  CommandSeparator,\n} from \"@/components/ui/command\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { Separator } from \"@/components/ui/separator\";\n\ninterface DataTableFacetedFilterProps<TData, TValue> {\n  column?: Column<TData, TValue>;\n  title?: string;\n  options: {\n    label: string;\n    value: string;\n    icon?: React.ComponentType<{ className?: string }>;\n  }[];\n}\n\nexport function DataTableDashFilter<TData, TValue>({\n  column,\n  title,\n  options,\n}: DataTableFacetedFilterProps<TData, TValue>) {\n  const facets = column?.getFacetedUniqueValues();\n  const selectedValues = new Set(column?.getFilterValue() as string[]);\n\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button variant=\"outline\" size=\"sm\" className=\"h-8 border-dashed\">\n          <PlusCircle />\n          {title}\n          {selectedValues?.size > 0 && (\n            <>\n              <Separator orientation=\"vertical\" className=\"mx-2 h-4\" />\n              <Badge\n                variant=\"secondary\"\n                className=\"rounded-sm px-1 font-normal lg:hidden\"\n              >\n                {selectedValues.size}\n              </Badge>\n              <div className=\"hidden gap-1 lg:flex\">\n                {selectedValues.size > 2 ? (\n                  <Badge\n                    variant=\"secondary\"\n                    className=\"rounded-sm px-1 font-normal\"\n                  >\n                    Select count: {selectedValues.size}\n                  </Badge>\n                ) : (\n                  options\n                    .filter((option) => selectedValues.has(option.value))\n                    .map((option) => (\n                      <Badge\n                        variant=\"secondary\"\n                        key={option.value}\n                        className=\"rounded-sm px-1 font-normal\"\n                      >\n                        {option.label}\n                      </Badge>\n                    ))\n                )}\n              </div>\n            </>\n          )}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[200px] p-0\" align=\"start\">\n        <Command>\n          <CommandInput placeholder={title} />\n          <CommandList>\n            <CommandEmpty>No results found</CommandEmpty>\n            <CommandGroup>\n              {options.map((option) => {\n                const isSelected = selectedValues.has(option.value);\n                return (\n                  <CommandItem\n                    key={option.value}\n                    onSelect={() => {\n                      if (isSelected) {\n                        selectedValues.delete(option.value);\n                      } else {\n                        selectedValues.add(option.value);\n                      }\n                      const filterValues = Array.from(selectedValues);\n                      column?.setFilterValue(\n                        filterValues.length ? filterValues : undefined\n                      );\n                    }}\n                  >\n                    <div\n                      className={cn(\n                        \"flex size-4 items-center justify-center rounded-sm border\",\n                        isSelected\n                          ? \"bg-primary border-primary text-primary-foreground\"\n                          : \"border-input [&_svg]:invisible\"\n                      )}\n                    >\n                      <Check className=\"text-primary-foreground size-3.5\" />\n                    </div>\n                    {option.icon && (\n                      <option.icon className=\"text-muted-foreground size-4\" />\n                    )}\n                    <span>{option.label}</span>\n                    {facets?.get(option.value) && (\n                      <span className=\"text-muted-foreground ml-auto flex size-4 items-center justify-center font-mono text-xs\">\n                        {facets.get(option.value)}\n                      </span>\n                    )}\n                  </CommandItem>\n                );\n              })}\n            </CommandGroup>\n            {selectedValues.size > 0 && (\n              <>\n                <CommandSeparator />\n                <CommandGroup>\n                  <CommandItem\n                    onSelect={() => column?.setFilterValue(undefined)}\n                    className=\"justify-center text-center\"\n                  >\n                    Clear filters\n                  </CommandItem>\n                </CommandGroup>\n              </>\n            )}\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/products-table/faceted-filter.tsx"
    },
    {
      "path": "src/registry/new-york/blocks/extensive-table/pagination.tsx",
      "content": "import { Table } from \"@tanstack/react-table\";\nimport {\n  ChevronLeft,\n  ChevronRight,\n  ChevronsLeft,\n  ChevronsRight,\n} from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\ninterface DataTablePaginationProps<TData> {\n  table: Table<TData>;\n}\n\nexport function DataTablePagination<TData>({\n  table,\n}: DataTablePaginationProps<TData>) {\n  return (\n    <div className=\"flex items-center justify-between gap-x-4 px-2\">\n      <div className=\"text-muted-foreground flex-1 text-sm\">\n        Selected {table.getFilteredSelectedRowModel().rows.length} of{\" \"}\n        {table.getFilteredRowModel().rows.length}\n      </div>\n      <div className=\"flex items-center space-x-6 lg:space-x-8\">\n        <div className=\"flex items-center space-x-2\">\n          <p className=\"text-sm\">Rows per page</p>\n          <Select\n            value={`${table.getState().pagination.pageSize}`}\n            onValueChange={(value) => {\n              table.setPageSize(Number(value));\n            }}\n          >\n            <SelectTrigger className=\"h-8 w-[70px]\">\n              <SelectValue placeholder={table.getState().pagination.pageSize} />\n            </SelectTrigger>\n            <SelectContent side=\"top\">\n              {[10, 20, 25, 30, 40, 50].map((pageSize) => (\n                <SelectItem key={pageSize} value={`${pageSize}`}>\n                  {pageSize}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n        <div className=\"flex w-[100px] items-center justify-center text-sm\">\n          Page {table.getState().pagination.pageIndex + 1} of{\" \"}\n          {table.getPageCount()}\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"outline\"\n            size=\"icon\"\n            className=\"hidden size-8 lg:flex\"\n            onClick={() => table.setPageIndex(0)}\n            disabled={!table.getCanPreviousPage()}\n          >\n            <span className=\"sr-only\">Goto first page</span>\n            <ChevronsLeft />\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"icon\"\n            className=\"size-8\"\n            onClick={() => table.previousPage()}\n            disabled={!table.getCanPreviousPage()}\n          >\n            <span className=\"sr-only\">Goto previous page</span>\n            <ChevronLeft />\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"icon\"\n            className=\"size-8\"\n            onClick={() => table.nextPage()}\n            disabled={!table.getCanNextPage()}\n          >\n            <span className=\"sr-only\">Goto next page</span>\n            <ChevronRight />\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"icon\"\n            className=\"hidden size-8 lg:flex\"\n            onClick={() => table.setPageIndex(table.getPageCount() - 1)}\n            disabled={!table.getCanNextPage()}\n          >\n            <span className=\"sr-only\">Goto last page</span>\n            <ChevronsRight />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/products-table/pagination.tsx"
    },
    {
      "path": "src/registry/new-york/blocks/extensive-table/search.tsx",
      "content": "\"use client\";\n\nimport { Table } from \"@tanstack/react-table\";\nimport { Input } from \"@/components/ui/input\";\n\ninterface DataTableSearchProps<TData> {\n  table: Table<TData>;\n  placeholder?: string;\n  className?: string;\n}\n\nexport function DataTableSearch<TData>({\n  table,\n  placeholder,\n  className = \"h-8 w-[150px] lg:w-[250px]\",\n}: DataTableSearchProps<TData>) {\n  return (\n    <Input\n      placeholder={placeholder ?? \"Search\"}\n      value={table.getState().globalFilter ?? \"\"}\n      onChange={(event) => table.setGlobalFilter(event.target.value)}\n      className={className}\n    />\n  );\n}\n",
      "type": "registry:component",
      "target": "components/products-table/search.tsx"
    },
    {
      "path": "src/registry/new-york/blocks/extensive-table/toolbar.tsx",
      "content": "\"use client\";\n\nimport { Table } from \"@tanstack/react-table\";\nimport { X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { DataTableViewOptions } from \"./view-options\";\nimport { DataTableSearch } from \"./search\";\nimport { DataTableDashFilter } from \"./faceted-filter\";\nimport { productCategories } from \"./column\";\n\ninterface DataTableToolbarProps<TData> {\n  table: Table<TData>;\n}\n\nexport function DefaultDataTableToolbar<TData>({\n  table,\n}: DataTableToolbarProps<TData>) {\n  const isFiltered = table.getState().columnFilters.length > 0;\n  return (\n    <div className=\"flex items-center justify-between\">\n      <div className=\"flex flex-1 items-center gap-2\">\n        <DataTableSearch table={table} placeholder=\"Filter ...\" />\n        {table.getColumn(\"category\") && (\n          <DataTableDashFilter\n            column={table.getColumn(\"category\")}\n            title=\"Categories\"\n            options={productCategories}\n          />\n        )}\n        {isFiltered && (\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => table.resetColumnFilters()}\n          >\n            Reset\n            <X />\n          </Button>\n        )}\n      </div>\n      <div className=\"flex items-center gap-2\">\n        <DataTableViewOptions table={table} />\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/products-table/toolbar.tsx"
    },
    {
      "path": "src/registry/new-york/blocks/extensive-table/view-options.tsx",
      "content": "\"use client\";\n\nimport { Table } from \"@tanstack/react-table\";\nimport { Settings2 } from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenuTrigger,\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n} from \"@/components/ui/dropdown-menu\";\n\nexport function DataTableViewOptions<TData>({\n  table,\n}: {\n  table: Table<TData>;\n}) {\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          className=\"ml-auto hidden h-8 lg:flex\"\n        >\n          <Settings2 />\n          View\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" className=\"w-[150px]\">\n        <DropdownMenuLabel>Toggle columns</DropdownMenuLabel>\n        <DropdownMenuSeparator />\n        {table\n          .getAllColumns()\n          .filter(\n            (column) =>\n              typeof column.accessorFn !== \"undefined\" && column.getCanHide()\n          )\n          .map((column) => {\n            return (\n              <DropdownMenuCheckboxItem\n                key={column.id}\n                className=\"capitalize\"\n                checked={column.getIsVisible()}\n                onCheckedChange={(value) => column.toggleVisibility(value)}\n              >\n                {column.id}\n              </DropdownMenuCheckboxItem>\n            );\n          })}\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/products-table/view-options.tsx"
    }
  ]
}