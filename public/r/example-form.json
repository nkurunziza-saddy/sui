{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "example-form",
  "type": "registry:component",
  "title": "Example Form",
  "description": "A contact form with Zod validation.",
  "dependencies": [
    "zod"
  ],
  "registryDependencies": [
    "button",
    "input",
    "label",
    "textarea",
    "card"
  ],
  "files": [
    {
      "path": "src/registry/new-york/blocks/form/form.tsx",
      "content": "\"use client\";\n\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport z from \"zod\";\nimport { Loader2 } from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\n// --- Example Data ---\nconst categories = [\n  { id: \"cat-1\", value: \"Electronics\" },\n  { id: \"cat-2\", value: \"Clothing\" },\n  { id: \"cat-3\", value: \"Books\" },\n];\n\nconst units = [\n  { value: \"pcs\", label: \"Pieces\" },\n  { value: \"kg\", label: \"Kilograms\" },\n  { value: \"l\", label: \"Liters\" },\n];\n\n// --- Schema ---\nconst productSchema = z.object({\n  name: z.string().min(1, \"Product name is required\"),\n  description: z.string().optional(),\n  sku: z.string().min(1, \"SKU is required\"),\n  price: z\n    .string()\n    .refine((val) => !isNaN(parseFloat(val)), \"Price must be a number\"),\n  categoryId: z.string().min(1, \"Category is required\"),\n  unit: z.string(),\n  weight: z.string().optional(),\n});\n\n// --- Component ---\nexport default function ExampleForm() {\n  const form = useForm<z.infer<typeof productSchema>>({\n    resolver: zodResolver(productSchema),\n    defaultValues: {\n      name: \"Example Product\",\n      description: \"This is a demo description\",\n      sku: \"EX-123\",\n      price: \"99.99\",\n      categoryId: \"cat-1\",\n      unit: \"pcs\",\n      weight: \"1.5\",\n    },\n  });\n\n  const onSubmit = (values: z.infer<typeof productSchema>) => {\n    alert(JSON.stringify(values, null, 2));\n  };\n\n  const { isSubmitting } = form.formState;\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        {/* Name */}\n        <FormField\n          control={form.control}\n          name=\"name\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Product Name *</FormLabel>\n              <FormControl>\n                <Input placeholder=\"Enter product name\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        {/* Description */}\n        <FormField\n          control={form.control}\n          name=\"description\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Description</FormLabel>\n              <FormControl>\n                <Textarea placeholder=\"Enter description\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        {/* SKU & Price */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"sku\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>SKU *</FormLabel>\n                <FormControl>\n                  <Input placeholder=\"Enter SKU\" {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          <FormField\n            control={form.control}\n            name=\"price\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Price *</FormLabel>\n                <FormControl>\n                  <Input\n                    type=\"number\"\n                    step=\"0.01\"\n                    placeholder=\"Enter price\"\n                    {...field}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        {/* Category */}\n        <FormField\n          control={form.control}\n          name=\"categoryId\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Category *</FormLabel>\n              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                <FormControl>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select a category\" />\n                  </SelectTrigger>\n                </FormControl>\n                <SelectContent>\n                  {categories.map((c) => (\n                    <SelectItem key={c.id} value={c.id}>\n                      {c.value}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        {/* Unit & Weight */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"unit\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Unit *</FormLabel>\n                <Select\n                  onValueChange={field.onChange}\n                  defaultValue={field.value}\n                >\n                  <FormControl>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    {units.map((u) => (\n                      <SelectItem key={u.value} value={u.value}>\n                        {u.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          <FormField\n            control={form.control}\n            name=\"weight\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Weight</FormLabel>\n                <FormControl>\n                  <Input\n                    type=\"number\"\n                    step=\"0.01\"\n                    placeholder=\"Enter weight\"\n                    {...field}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        {/* Actions */}\n        <div className=\"flex justify-end gap-3 pt-6 border-t\">\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            onClick={() => form.reset()}\n            disabled={isSubmitting}\n          >\n            Cancel\n          </Button>\n          <Button\n            type=\"submit\"\n            disabled={isSubmitting}\n            className=\"min-w-[120px]\"\n          >\n            {isSubmitting ? (\n              <>\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                Saving...\n              </>\n            ) : (\n              \"Save Product\"\n            )}\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}